// Generated by Karakum - do not modify it manually!

@file:JsModule("obsidian/obsidian")

package obsidian

// unhandled import: Extension from "@codemirror/state"
// unhandled import: StateField from "@codemirror/state"
// unhandled import: EditorView from "@codemirror/view"
// unhandled import: ViewPlugin from "@codemirror/view"
// unhandled import: * as Moment from "moment"

/**
 * This file is automatically generated.
 * Please do not modify or send pull requests for it.
 */






external object global {
interface ObjectConstructor {
/* new (value?: any): Object; */
operator fun  invoke(): Any?
operator fun  invoke(value: Any?): Any?
/** A reference to the prototype for a class of objects. */
val prototype: Object
/**
     * Returns the prototype of an object.
     * @param o The object that references the prototype.
     */
fun getPrototypeOf(o: Any?): Any?
/**
     * Gets the own property descriptor of the specified object.
     * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.
     * @param o Object that contains the property.
     * @param p Name of the property.
     */
fun getOwnPropertyDescriptor(o: Any?, p: PropertyKey): PropertyDescriptor?
/**
     * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly
     * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.
     * @param o Object that contains the own properties.
     */
fun getOwnPropertyNames(o: Any?): js.array.ReadonlyArray<String>
/**
     * Creates an object that has the specified prototype or that has null prototype.
     * @param o Object to use as a prototype. May be null.
     */
fun create(o: Any?): Any?
/**
     * Creates an object that has the specified prototype, and that optionally contains specified properties.
     * @param o Object to use as a prototype. May be null
     * @param properties JavaScript object that contains one or more property descriptors.
     */
fun create(o: Any?, properties: ObjectConstructorCreateProperties): Any?
/**
     * Adds a property to an object, or modifies attributes of an existing property.
     * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.
     * @param p The property name.
     * @param attributes Descriptor for the property. It can be for a data property or an accessor property.
     */
fun <T> defineProperty(o: T, p: PropertyKey, attributes: ObjectConstructorDefinePropertyAttributes): T
/**
     * Adds one or more properties to an object, and/or modifies attributes of existing properties.
     * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.
     * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.
     */
fun <T> defineProperties(o: T, properties: ObjectConstructorDefinePropertiesProperties): T
/**
     * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.
     * @param o Object on which to lock the attributes.
     */
fun <T> seal(o: T): T
/**
     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
     * @param f Object on which to lock the attributes.
     */
fun <T : Function> freeze(f: T): T
/**
     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
     * @param o Object on which to lock the attributes.
     */
fun <T : Temp0<U>, U : Any /* string | bigint | number | boolean | symbol */> freeze(o: T): Readonly<T>
/**
     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
     * @param o Object on which to lock the attributes.
     */
fun <T> freeze(o: T): Readonly<T>
/**
     * Prevents the addition of new properties to an object.
     * @param o Object to make non-extensible.
     */
fun <T> preventExtensions(o: T): T
/**
     * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.
     * @param o Object to test.
     */
fun isSealed(o: Any?): Boolean
/**
     * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.
     * @param o Object to test.
     */
fun isFrozen(o: Any?): Boolean
/**
     * Returns a value that indicates whether new properties can be added to an object.
     * @param o Object to test.
     */
fun isExtensible(o: Any?): Boolean
/**
     * Returns the names of the enumerable string properties and methods of an object.
     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
fun keys(o: Any): js.array.ReadonlyArray<String>
/**
     * Returns the names of the enumerable string properties and methods of an object.
     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
fun keys(o: Any): js.array.ReadonlyArray<String>
/**
     * Copy the values of all of the enumerable own properties from one or more source objects to a
     * target object. Returns the target object.
     * @param target The target object to copy to.
     * @param source The source object from which to copy properties.
     */
fun <T : Any, U> assign(target: T, source: U): ObjectConstructorAssignResult<T, U>
/**
     * Copy the values of all of the enumerable own properties from one or more source objects to a
     * target object. Returns the target object.
     * @param target The target object to copy to.
     * @param source1 The first source object from which to copy properties.
     * @param source2 The second source object from which to copy properties.
     */
fun <T : Any, U, V> assign(target: T, source1: U, source2: V): ObjectConstructorAssignResult<T, U, V>
/**
     * Copy the values of all of the enumerable own properties from one or more source objects to a
     * target object. Returns the target object.
     * @param target The target object to copy to.
     * @param source1 The first source object from which to copy properties.
     * @param source2 The second source object from which to copy properties.
     * @param source3 The third source object from which to copy properties.
     */
fun <T : Any, U, V, W> assign(target: T, source1: U, source2: V, source3: W): ObjectConstructorAssignResult<T, U, V, W>
/**
     * Copy the values of all of the enumerable own properties from one or more source objects to a
     * target object. Returns the target object.
     * @param target The target object to copy to.
     * @param sources One or more source objects from which to copy properties
     */
fun assign(target: Any, vararg sources: Any?): Any?
/**
     * Returns an array of all symbol properties found directly on object o.
     * @param o Object to retrieve the symbols from.
     */
fun getOwnPropertySymbols(o: Any?): js.array.ReadonlyArray<js.symbol.Symbol>
/**
     * Returns true if the values are the same value, false otherwise.
     * @param value1 The first value.
     * @param value2 The second value.
     */
fun `is`(value1: Any?, value2: Any?): Boolean
/**
     * Sets the prototype of a specified object o to object proto or null. Returns the object o.
     * @param o The object to change its prototype.
     * @param proto The value of the new prototype or null.
     */
fun setPrototypeOf(o: Any?, proto: Any?): Any?
/**
     * Returns an array of values of the enumerable own properties of an object
     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
fun <T> values(o: Temp1<T>): js.array.ReadonlyArray<T>

/**
     * Returns an array of values of the enumerable own properties of an object
     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
fun <T> values(o: ArrayLike<T>): js.array.ReadonlyArray<T>
/**
     * Returns an array of values of the enumerable own properties of an object
     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
fun values(o: Any): js.array.ReadonlyArray<Any?>
/**
     * Returns an array of key/values of the enumerable own properties of an object
     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
fun <T> entries(o: Temp2<T>): js.array.ReadonlyArray<js.array.Tuple2<String, T>>

/**
     * Returns an array of key/values of the enumerable own properties of an object
     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
fun <T> entries(o: ArrayLike<T>): js.array.ReadonlyArray<js.array.Tuple2<String, T>>
/**
     * Returns an array of key/values of the enumerable own properties of an object
     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
fun entries(o: Any): js.array.ReadonlyArray<js.array.Tuple2<String, Any?>>
/**
     * Returns an object containing all own property descriptors of an object
     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
fun <T> getOwnPropertyDescriptors(o: T): ObjectConstructorGetOwnPropertyDescriptorsResult<T, T>
/**
     * Returns an object created by key-value entries for properties and methods
     * @param entries An iterable object that contains key-value entries for properties and methods.
     */
fun fromEntries(entries: Iterable<js.array.ReadonlyArray<Any?>>): Any?
/**
     * Determines whether an object has a property with the specified name.
     * @param o An object.
     * @param v A property name.
     */
fun hasOwn(o: Any, v: PropertyKey): Boolean
/**
     * Groups members of an iterable according to the return value of the passed callback.
     * @param items An iterable.
     * @param keySelector A callback which will be invoked for each item in items.
     */
fun <K : PropertyKey, T> groupBy(items: Iterable<T>, keySelector: (item: T, index: Double) -> K): Partial<Record<K, js.array.ReadonlyArray<T>>>
fun isEmpty(`object`: Record<String, Any?>): Boolean
fun <T> each(`object`: ObjectConstructorEachObject<T>, callback: (value: T, key: String? /* use undefined for default */) -> Any /* boolean | void */, context: Any? = definedExternally): Boolean
}
interface ArrayConstructor {
/* new <T>(arrayLength: number): T[]; */
/* new <T>(...items: T[]): T[]; */
operator fun <T> invoke(arrayLength: Double): js.array.ReadonlyArray<T>
operator fun <T> invoke(vararg items: T): js.array.ReadonlyArray<T>
fun isArray(arg: Any?): Boolean /* arg is any[] */
val prototype: js.array.ReadonlyArray<Any?>
/**
     * Creates an array from an array-like object.
     * @param arrayLike An array-like object to convert to an array.
     */
fun <T> from(arrayLike: ArrayLike<T>): js.array.ReadonlyArray<T>
/**
     * Creates an array from an iterable object.
     * @param arrayLike An array-like object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
fun <T, U> from(arrayLike: ArrayLike<T>, mapfn: (v: T, k: Double) -> U, thisArg: Any? = definedExternally): js.array.ReadonlyArray<U>
/**
     * Creates an array from an iterable object.
     * @param iterable An iterable object to convert to an array.
     */
fun <T> from(iterable: Iterable<T>): js.array.ReadonlyArray<T>

/**
     * Creates an array from an iterable object.
     * @param iterable An iterable object to convert to an array.
     */
fun <T> from(iterable: ArrayLike<T>): js.array.ReadonlyArray<T>
/**
     * Creates an array from an iterable object.
     * @param iterable An iterable object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
fun <T, U> from(iterable: Iterable<T>, mapfn: (v: T, k: Double) -> U, thisArg: Any? = definedExternally): js.array.ReadonlyArray<U>

/**
     * Creates an array from an iterable object.
     * @param iterable An iterable object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
fun <T, U> from(iterable: ArrayLike<T>, mapfn: (v: T, k: Double) -> U, thisArg: Any? = definedExternally): js.array.ReadonlyArray<U>
/**
     * Returns a new array from a set of elements.
     * @param items A set of elements to include in the new array object.
     */
fun <T> of(vararg items: T): js.array.ReadonlyArray<T>
/**
     * Creates an array from an async iterator or iterable object.
     * @param iterableOrArrayLike An async iterator or array-like object to convert to an array.
     */
fun <T> fromAsync(iterableOrArrayLike: AsyncIterable<T>): Promise<js.array.ReadonlyArray<T>>

/**
     * Creates an array from an async iterator or iterable object.
     * @param iterableOrArrayLike An async iterator or array-like object to convert to an array.
     */
fun <T> fromAsync(iterableOrArrayLike: Iterable<Any /* T | PromiseLike<T> */>): Promise<js.array.ReadonlyArray<T>>

/**
     * Creates an array from an async iterator or iterable object.
     * @param iterableOrArrayLike An async iterator or array-like object to convert to an array.
     */
fun <T> fromAsync(iterableOrArrayLike: ArrayLike<Any /* T | PromiseLike<T> */>): Promise<js.array.ReadonlyArray<T>>
/**
     * Creates an array from an async iterator or iterable object.
     *
     * @param iterableOrArrayLike An async iterator or array-like object to convert to an array.
     * @param mapfn A mapping function to call on every element of itarableOrArrayLike.
     *      Each return value is awaited before being added to result array.
     * @param thisArg Value of 'this' used when executing mapfn.
     */
fun <T, U> fromAsync(iterableOrArrayLike: AsyncIterable<T>, mapFn: (value: Awaited<T>, index: Double) -> U, thisArg: Any? = definedExternally): Promise<js.array.ReadonlyArray<Awaited<U>>>

/**
     * Creates an array from an async iterator or iterable object.
     *
     * @param iterableOrArrayLike An async iterator or array-like object to convert to an array.
     * @param mapfn A mapping function to call on every element of itarableOrArrayLike.
     *      Each return value is awaited before being added to result array.
     * @param thisArg Value of 'this' used when executing mapfn.
     */
fun <T, U> fromAsync(iterableOrArrayLike: Iterable<T>, mapFn: (value: Awaited<T>, index: Double) -> U, thisArg: Any? = definedExternally): Promise<js.array.ReadonlyArray<Awaited<U>>>

/**
     * Creates an array from an async iterator or iterable object.
     *
     * @param iterableOrArrayLike An async iterator or array-like object to convert to an array.
     * @param mapfn A mapping function to call on every element of itarableOrArrayLike.
     *      Each return value is awaited before being added to result array.
     * @param thisArg Value of 'this' used when executing mapfn.
     */
fun <T, U> fromAsync(iterableOrArrayLike: ArrayLike<T>, mapFn: (value: Awaited<T>, index: Double) -> U, thisArg: Any? = definedExternally): Promise<js.array.ReadonlyArray<Awaited<U>>>
fun <T> combine(arrays: js.array.ReadonlyArray<js.array.ReadonlyArray<T>>): js.array.ReadonlyArray<T>
}
interface Array<T> {
/**
     * Gets or sets the length of the array. This is a number one higher than the highest index in the array.
     */
var length: Double
/**
     * Returns a string representation of an array.
     */
fun toString(): String
/**
     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.
     */
fun toLocaleString(): String
fun toLocaleString(locales: String, options: ArrayToLocaleStringOptions = definedExternally): String

fun toLocaleString(locales: js.array.ReadonlyArray<String>, options: ArrayToLocaleStringOptions = definedExternally): String
/**
     * Removes the last element from an array and returns it.
     * If the array is empty, undefined is returned and the array is not modified.
     */
fun pop(): T?
/**
     * Appends new elements to the end of an array, and returns the new length of the array.
     * @param items New elements to add to the array.
     */
fun push(vararg items: T): Double
/**
     * Combines two or more arrays.
     * This method returns a new array without modifying any existing arrays.
     * @param items Additional arrays and/or items to add to the end of the array.
     */
fun concat(vararg items: (Any /* T | ConcatArray<T> */)): js.array.ReadonlyArray<T>
/**
     * Adds all the elements of an array into a string, separated by the specified separator string.
     * @param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.
     */
fun join(separator: String = definedExternally): String
/**
     * Reverses the elements in an array in place.
     * This method mutates the array and returns a reference to the same array.
     */
fun reverse(): js.array.ReadonlyArray<T>
/**
     * Removes the first element from an array and returns it.
     * If the array is empty, undefined is returned and the array is not modified.
     */
fun shift(): T?
/**
     * Returns a copy of a section of an array.
     * For both start and end, a negative index can be used to indicate an offset from the end of the array.
     * For example, -2 refers to the second to last element of the array.
     * @param start The beginning index of the specified portion of the array.
     * If start is undefined, then the slice begins at index 0.
     * @param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.
     * If end is undefined, then the slice extends to the end of the array.
     */
fun slice(start: Double = definedExternally, end: Double = definedExternally): js.array.ReadonlyArray<T>
/**
     * Sorts an array in place.
     * This method mutates the array and returns a reference to the same array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending, UTF-16 code unit order.
     * ```ts
     * [11,2,22,1].sort((a, b) => a - b)
     * ```
     */
fun sort(compareFn: (a: T, b: T) -> Double = definedExternally): Unit /* this */
/**
     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
     * @param start The zero-based location in the array from which to start removing elements.
     * @param deleteCount The number of elements to remove. Omitting this argument will remove all elements from the start
     * paramater location to end of the array. If value of this argument is either a negative number, zero, undefined, or a type
     * that cannot be converted to an integer, the function will evaluate the argument as zero and not remove any elements.
     * @returns An array containing the elements that were deleted.
     */
fun splice(start: Double, deleteCount: Double = definedExternally): js.array.ReadonlyArray<T>
/**
     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
     * @param start The zero-based location in the array from which to start removing elements.
     * @param deleteCount The number of elements to remove. If value of this argument is either a negative number, zero,
     * undefined, or a type that cannot be converted to an integer, the function will evaluate the argument as zero and
     * not remove any elements.
     * @param items Elements to insert into the array in place of the deleted elements.
     * @returns An array containing the elements that were deleted.
     */
fun splice(start: Double, deleteCount: Double, vararg items: T): js.array.ReadonlyArray<T>
/**
     * Inserts new elements at the start of an array, and returns the new length of the array.
     * @param items Elements to insert at the start of the array.
     */
fun unshift(vararg items: T): Double
/**
     * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
     */
fun indexOf(searchElement: T, fromIndex: Double = definedExternally): Double
/**
     * Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.
     */
fun lastIndexOf(searchElement: T, fromIndex: Double = definedExternally): Double
/**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
fun <S : T> every(predicate: (value: T, index: Double, array: js.array.ReadonlyArray<T>) -> Boolean /* value is S */, thisArg: Any? = definedExternally): Boolean /* this is S[] */
/**
     * Determines whether all the members of an array satisfy the specified test.
     * @param predicate A function that accepts up to three arguments. The every method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value false, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
fun every(predicate: (value: T, index: Double, array: js.array.ReadonlyArray<T>) -> Any?, thisArg: Any? = definedExternally): Boolean
/**
     * Determines whether the specified callback function returns true for any element of an array.
     * @param predicate A function that accepts up to three arguments. The some method calls
     * the predicate function for each element in the array until the predicate returns a value
     * which is coercible to the Boolean value true, or until the end of the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function.
     * If thisArg is omitted, undefined is used as the this value.
     */
fun some(predicate: (value: T, index: Double, array: js.array.ReadonlyArray<T>) -> Any?, thisArg: Any? = definedExternally): Boolean
/**
     * Performs the specified action for each element in an array.
     * @param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
fun forEach(callbackfn: (value: T, index: Double, array: js.array.ReadonlyArray<T>) -> Unit, thisArg: Any? = definedExternally): Unit
/**
     * Calls a defined callback function on each element of an array, and returns an array that contains the results.
     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
fun <U> map(callbackfn: (value: T, index: Double, array: js.array.ReadonlyArray<T>) -> U, thisArg: Any? = definedExternally): js.array.ReadonlyArray<U>
/**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.
     */
fun <S : T> filter(predicate: (value: T, index: Double, array: js.array.ReadonlyArray<T>) -> Boolean /* value is S */, thisArg: Any? = definedExternally): js.array.ReadonlyArray<S>
/**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.
     */
fun filter(predicate: (value: T, index: Double, array: js.array.ReadonlyArray<T>) -> Any?, thisArg: Any? = definedExternally): js.array.ReadonlyArray<T>
/**
     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
fun reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: Double, array: js.array.ReadonlyArray<T>) -> T): T
fun reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: Double, array: js.array.ReadonlyArray<T>) -> T, initialValue: T): T
/**
     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
fun <U> reduce(callbackfn: (previousValue: U, currentValue: T, currentIndex: Double, array: js.array.ReadonlyArray<T>) -> U, initialValue: U): U
/**
     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
fun reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: Double, array: js.array.ReadonlyArray<T>) -> T): T
fun reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: Double, array: js.array.ReadonlyArray<T>) -> T, initialValue: T): T
/**
     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
     */
fun <U> reduceRight(callbackfn: (previousValue: U, currentValue: T, currentIndex: Double, array: js.array.ReadonlyArray<T>) -> U, initialValue: U): U
operator fun get(key: Double): T?

operator fun set(key: Double, value: T?)
/**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
fun <S : T> find(predicate: (value: T, index: Double, obj: js.array.ReadonlyArray<T>) -> Boolean /* value is S */, thisArg: Any? = definedExternally): S?
fun find(predicate: (value: T, index: Double, obj: js.array.ReadonlyArray<T>) -> Any?, thisArg: Any? = definedExternally): T?
/**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
fun findIndex(predicate: (value: T, index: Double, obj: js.array.ReadonlyArray<T>) -> Any?, thisArg: Any? = definedExternally): Double
/**
     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
     * length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
     * length+end.
     */
fun fill(value: T, start: Double = definedExternally, end: Double = definedExternally): Unit /* this */
/**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
     * length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
     * is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
     */
fun copyWithin(target: Double, start: Double, end: Double = definedExternally): Unit /* this */
/**
     * Returns an iterable of key, value pairs for every entry in the array
     */
fun entries(): ArrayIterator<js.array.Tuple2<Double, T>>
/**
     * Returns an iterable of keys in the array
     */
fun keys(): ArrayIterator<Double>
/**
     * Returns an iterable of values in the array
     */
fun values(): ArrayIterator<T>
/**
     * Determines whether an array includes a certain element, returning true or false as appropriate.
     * @param searchElement The element to search for.
     * @param fromIndex The position in this array at which to begin searching for searchElement.
     */
fun includes(searchElement: T, fromIndex: Double = definedExternally): Boolean
/**
     * Calls a defined callback function on each element of an array. Then, flattens the result into
     * a new array.
     * This is identical to a map followed by flat with depth 1.
     *
     * @param callback A function that accepts up to three arguments. The flatMap method calls the
     * callback function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callback function. If
     * thisArg is omitted, undefined is used as the this value.
     */
fun <U, This /* default is Nothing? */> flatMap(callback: (/* this: This, */ value: T, index: Double, array: js.array.ReadonlyArray<T>) -> Any /* U | ReadonlyArray<U> */, thisArg: This = definedExternally): js.array.ReadonlyArray<U>
/**
     * Returns a new array with all sub-array elements concatenated into it recursively up to the
     * specified depth.
     *
     * @param depth The maximum recursion depth
     */
fun <A, D : Double /* default is Double /* 1 */ */> flat(/* this: A, */ depth: D = definedExternally): js.array.ReadonlyArray<FlatArray<A, D>>
/**
     * Returns the item located at the specified index.
     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
     */
fun at(index: Double): T?
/**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
fun <S : T> findLast(predicate: (value: T, index: Double, array: js.array.ReadonlyArray<T>) -> Boolean /* value is S */, thisArg: Any? = definedExternally): S?
fun findLast(predicate: (value: T, index: Double, array: js.array.ReadonlyArray<T>) -> Any?, thisArg: Any? = definedExternally): T?
/**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
fun findLastIndex(predicate: (value: T, index: Double, array: js.array.ReadonlyArray<T>) -> Any?, thisArg: Any? = definedExternally): Double
/**
         *
         * @since 1.4.4
         */
fun findLastIndex(predicate: (value: T) -> Boolean): Double
/**
     * Returns a copy of an array with its elements reversed.
     */
fun toReversed(): js.array.ReadonlyArray<T>
/**
     * Returns a copy of an array with its elements sorted.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending, UTF-16 code unit order.
     * ```ts
     * [11, 2, 22, 1].toSorted((a, b) => a - b) // [1, 2, 11, 22]
     * ```
     */
fun toSorted(compareFn: (a: T, b: T) -> Double = definedExternally): js.array.ReadonlyArray<T>
/**
     * Copies an array and removes elements while returning the remaining elements.
     * @param start The zero-based location in the array from which to start removing elements.
     * @param deleteCount The number of elements to remove.
     * @returns A copy of the original array with the remaining elements.
     */
fun toSpliced(start: Double, deleteCount: Double = definedExternally): js.array.ReadonlyArray<T>
/**
     * Copies an array and removes elements and, if necessary, inserts new elements in their place. Returns the copied array.
     * @param start The zero-based location in the array from which to start removing elements.
     * @param deleteCount The number of elements to remove.
     * @param items Elements to insert into the copied array in place of the deleted elements.
     * @returns The copied array.
     */
fun toSpliced(start: Double, deleteCount: Double, vararg items: T): js.array.ReadonlyArray<T>
/**
     * Copies an array, then overwrites the value at the provided index with the
     * given value. If the index is negative, then it replaces from the end
     * of the array.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to write into the copied array.
     * @returns The copied array with the updated value.
     */
fun with(index: Double, value: T): js.array.ReadonlyArray<T>
fun first(): T?
fun last(): T?
fun contains(target: T): Boolean
fun remove(target: T): Unit
fun shuffle(): Unit /* this */
fun unique(): js.array.ReadonlyArray<T>
}
interface Math {
/** The mathematical constant e. This is Euler's number, the base of natural logarithms. */
val E: Double
/** The natural logarithm of 10. */
val LN10: Double
/** The natural logarithm of 2. */
val LN2: Double
/** The base-2 logarithm of e. */
val LOG2E: Double
/** The base-10 logarithm of e. */
val LOG10E: Double
/** Pi. This is the ratio of the circumference of a circle to its diameter. */
val PI: Double
/** The square root of 0.5, or, equivalently, one divided by the square root of 2. */
val SQRT1_2: Double
/** The square root of 2. */
val SQRT2: Double
/**
     * Returns the absolute value of a number (the value without regard to whether it is positive or negative).
     * For example, the absolute value of -5 is the same as the absolute value of 5.
     * @param x A numeric expression for which the absolute value is needed.
     */
fun abs(x: Double): Double
/**
     * Returns the arc cosine (or inverse cosine) of a number.
     * @param x A numeric expression.
     */
fun acos(x: Double): Double
/**
     * Returns the arcsine of a number.
     * @param x A numeric expression.
     */
fun asin(x: Double): Double
/**
     * Returns the arctangent of a number.
     * @param x A numeric expression for which the arctangent is needed.
     */
fun atan(x: Double): Double
/**
     * Returns the angle (in radians) between the X axis and the line going through both the origin and the given point.
     * @param y A numeric expression representing the cartesian y-coordinate.
     * @param x A numeric expression representing the cartesian x-coordinate.
     */
fun atan2(y: Double, x: Double): Double
/**
     * Returns the smallest integer greater than or equal to its numeric argument.
     * @param x A numeric expression.
     */
fun ceil(x: Double): Double
/**
     * Returns the cosine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
fun cos(x: Double): Double
/**
     * Returns e (the base of natural logarithms) raised to a power.
     * @param x A numeric expression representing the power of e.
     */
fun exp(x: Double): Double
/**
     * Returns the greatest integer less than or equal to its numeric argument.
     * @param x A numeric expression.
     */
fun floor(x: Double): Double
/**
     * Returns the natural logarithm (base e) of a number.
     * @param x A numeric expression.
     */
fun log(x: Double): Double
/**
     * Returns the larger of a set of supplied numeric expressions.
     * @param values Numeric expressions to be evaluated.
     */
fun max(vararg values: Double): Double
/**
     * Returns the smaller of a set of supplied numeric expressions.
     * @param values Numeric expressions to be evaluated.
     */
fun min(vararg values: Double): Double
/**
     * Returns the value of a base expression taken to a specified power.
     * @param x The base value of the expression.
     * @param y The exponent value of the expression.
     */
fun pow(x: Double, y: Double): Double
/** Returns a pseudorandom number between 0 and 1. */
fun random(): Double
/**
     * Returns a supplied numeric expression rounded to the nearest integer.
     * @param x The value to be rounded to the nearest integer.
     */
fun round(x: Double): Double
/**
     * Returns the sine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
fun sin(x: Double): Double
/**
     * Returns the square root of a number.
     * @param x A numeric expression.
     */
fun sqrt(x: Double): Double
/**
     * Returns the tangent of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
fun tan(x: Double): Double
/**
     * Returns the number of leading zero bits in the 32-bit binary representation of a number.
     * @param x A numeric expression.
     */
fun clz32(x: Double): Double
/**
     * Returns the result of 32-bit multiplication of two numbers.
     * @param x First number
     * @param y Second number
     */
fun imul(x: Double, y: Double): Double
/**
     * Returns the sign of the x, indicating whether x is positive, negative or zero.
     * @param x The numeric expression to test
     */
fun sign(x: Double): Double
/**
     * Returns the base 10 logarithm of a number.
     * @param x A numeric expression.
     */
fun log10(x: Double): Double
/**
     * Returns the base 2 logarithm of a number.
     * @param x A numeric expression.
     */
fun log2(x: Double): Double
/**
     * Returns the natural logarithm of 1 + x.
     * @param x A numeric expression.
     */
fun log1p(x: Double): Double
/**
     * Returns the result of (e^x - 1), which is an implementation-dependent approximation to
     * subtracting 1 from the exponential function of x (e raised to the power of x, where e
     * is the base of the natural logarithms).
     * @param x A numeric expression.
     */
fun expm1(x: Double): Double
/**
     * Returns the hyperbolic cosine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
fun cosh(x: Double): Double
/**
     * Returns the hyperbolic sine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
fun sinh(x: Double): Double
/**
     * Returns the hyperbolic tangent of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
fun tanh(x: Double): Double
/**
     * Returns the inverse hyperbolic cosine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
fun acosh(x: Double): Double
/**
     * Returns the inverse hyperbolic sine of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
fun asinh(x: Double): Double
/**
     * Returns the inverse hyperbolic tangent of a number.
     * @param x A numeric expression that contains an angle measured in radians.
     */
fun atanh(x: Double): Double
/**
     * Returns the square root of the sum of squares of its arguments.
     * @param values Values to compute the square root for.
     *     If no arguments are passed, the result is +0.
     *     If there is only one argument, the result is the absolute value.
     *     If any argument is +Infinity or -Infinity, the result is +Infinity.
     *     If any argument is NaN, the result is NaN.
     *     If all arguments are either +0 or −0, the result is +0.
     */
fun hypot(vararg values: Double): Double
/**
     * Returns the integral part of the a numeric expression, x, removing any fractional digits.
     * If x is already an integer, the result is x.
     * @param x A numeric expression.
     */
fun trunc(x: Double): Double
/**
     * Returns the nearest single precision float representation of a number.
     * @param x A numeric expression.
     */
fun fround(x: Double): Double
/**
     * Returns an implementation-dependent approximation to the cube root of number.
     * @param x A numeric expression.
     */
fun cbrt(x: Double): Double
/**
     * Returns the nearest half precision float representation of a number.
     * @param x A numeric expression.
     */
fun f16round(x: Double): Double
fun clamp(value: Double, min: Double, max: Double): Double
fun square(value: Double): Double
}
interface StringConstructor {
/* new (value?: any): String; */
operator fun  invoke(value: Any? = definedExternally): String
val prototype: String
fun fromCharCode(vararg codes: Double): String
/**
     * Return the String value whose elements are, in order, the elements in the List elements.
     * If length is 0, the empty string is returned.
     */
fun fromCodePoint(vararg codePoints: Double): String
/**
     * String.raw is usually used as a tag function of a Tagged Template String. When called as
     * such, the first argument will be a well formed template call site object and the rest
     * parameter will contain the substitution values. It can also be called directly, for example,
     * to interleave strings and values from your own tag function, and in this case the only thing
     * it needs from the first argument is the raw property.
     * @param template A well-formed template string call site representation.
     * @param substitutions A set of substitution values.
     */
fun raw(template: StringConstructorRawTemplate, vararg substitutions: Any?): String
fun isString(obj: Any?): Boolean /* obj is string */
}
interface String {
/** Returns a string representation of a string. */
fun toString(): String
/**
     * Returns the character at the specified index.
     * @param pos The zero-based index of the desired character.
     */
fun charAt(pos: Double): String
/**
     * Returns the Unicode value of the character at the specified location.
     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.
     */
fun charCodeAt(index: Double): Double
/**
     * Returns a string that contains the concatenation of two or more strings.
     * @param strings The strings to append to the end of the string.
     */
fun concat(vararg strings: String): String
/**
     * Returns the position of the first occurrence of a substring.
     * @param searchString The substring to search for in the string
     * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.
     */
fun indexOf(searchString: String, position: Double = definedExternally): Double
/**
     * Returns the last occurrence of a substring in the string.
     * @param searchString The substring to search for.
     * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.
     */
fun lastIndexOf(searchString: String, position: Double = definedExternally): Double
/**
     * Determines whether two strings are equivalent in the current locale.
     * @param that String to compare to target string
     */
fun localeCompare(that: String): Double
/**
     * Determines whether two strings are equivalent in the current or specified locale.
     * @param that String to compare to target string
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.
     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.
     */
fun localeCompare(that: String): Double

/**
     * Determines whether two strings are equivalent in the current or specified locale.
     * @param that String to compare to target string
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.
     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.
     */
fun localeCompare(that: String, locales: String = definedExternally, options: Intl.CollatorOptions = definedExternally): Double

/**
     * Determines whether two strings are equivalent in the current or specified locale.
     * @param that String to compare to target string
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.
     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.
     */
fun localeCompare(that: String, locales: js.array.ReadonlyArray<String> = definedExternally, options: Intl.CollatorOptions = definedExternally): Double
/**
     * Determines whether two strings are equivalent in the current or specified locale.
     * @param that String to compare to target string
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.
     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.
     */
fun localeCompare(that: String, locales: Intl.LocalesArgument = definedExternally, options: Intl.CollatorOptions = definedExternally): Double
/**
     * Matches a string with a regular expression, and returns an array containing the results of that search.
     * @param regexp A variable name or string literal containing the regular expression pattern and flags.
     */
fun match(regexp: String): RegExpMatchArray?

/**
     * Matches a string with a regular expression, and returns an array containing the results of that search.
     * @param regexp A variable name or string literal containing the regular expression pattern and flags.
     */
fun match(regexp: RegExp): RegExpMatchArray?
/**
     * Matches a string or an object that supports being matched against, and returns an array
     * containing the results of that search, or null if no matches are found.
     * @param matcher An object that supports being matched against.
     */
fun match(matcher: StringMatchMatcher): RegExpMatchArray?
/**
     * Replaces text in a string, using a regular expression or search string.
     * @param searchValue A string or regular expression to search for.
     * @param replaceValue A string containing the text to replace. When the {@linkcode searchValue} is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of {@linkcode searchValue} is replaced.
     */
fun replace(searchValue: String, replaceValue: String): String

/**
     * Replaces text in a string, using a regular expression or search string.
     * @param searchValue A string or regular expression to search for.
     * @param replaceValue A string containing the text to replace. When the {@linkcode searchValue} is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of {@linkcode searchValue} is replaced.
     */
fun replace(searchValue: RegExp, replaceValue: String): String
/**
     * Replaces text in a string, using a regular expression or search string.
     * @param searchValue A string to search for.
     * @param replacer A function that returns the replacement text.
     */
fun replace(searchValue: String, replacer: Function<String> /* (substring: string, ...args: any[]) => string */): String

/**
     * Replaces text in a string, using a regular expression or search string.
     * @param searchValue A string to search for.
     * @param replacer A function that returns the replacement text.
     */
fun replace(searchValue: RegExp, replacer: Function<String> /* (substring: string, ...args: any[]) => string */): String
/**
     * Passes a string and {@linkcode replaceValue} to the `[Symbol.replace]` method on {@linkcode searchValue}. This method is expected to implement its own replacement algorithm.
     * @param searchValue An object that supports searching for and replacing matches within a string.
     * @param replaceValue The replacement text.
     */
fun replace(searchValue: StringReplaceSearchValue, replaceValue: String): String
/**
     * Replaces text in a string, using an object that supports replacement within a string.
     * @param searchValue A object can search for and replace matches within a string.
     * @param replacer A function that returns the replacement text.
     */
fun replace(searchValue: StringReplaceSearchValue, replacer: Function<String> /* (substring: string, ...args: any[]) => string */): String
/**
     * Finds the first substring match in a regular expression search.
     * @param regexp The regular expression pattern and applicable flags.
     */
fun search(regexp: String): Double

/**
     * Finds the first substring match in a regular expression search.
     * @param regexp The regular expression pattern and applicable flags.
     */
fun search(regexp: RegExp): Double
/**
     * Finds the first substring match in a regular expression search.
     * @param searcher An object which supports searching within a string.
     */
fun search(searcher: StringSearchSearcher): Double
/**
     * Returns a section of a string.
     * @param start The index to the beginning of the specified portion of stringObj.
     * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.
     * If this value is not specified, the substring continues to the end of stringObj.
     */
fun slice(start: Double = definedExternally, end: Double = definedExternally): String
/**
     * Split a string into substrings using the specified separator and return them as an array.
     * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.
     * @param limit A value used to limit the number of elements returned in the array.
     */
fun split(separator: String, limit: Double = definedExternally): js.array.ReadonlyArray<String>

/**
     * Split a string into substrings using the specified separator and return them as an array.
     * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.
     * @param limit A value used to limit the number of elements returned in the array.
     */
fun split(separator: RegExp, limit: Double = definedExternally): js.array.ReadonlyArray<String>
/**
     * Split a string into substrings using the specified separator and return them as an array.
     * @param splitter An object that can split a string.
     * @param limit A value used to limit the number of elements returned in the array.
     */
fun split(splitter: StringSplitSplitter, limit: Double = definedExternally): js.array.ReadonlyArray<String>
/**
     * Returns the substring at the specified location within a String object.
     * @param start The zero-based index number indicating the beginning of the substring.
     * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.
     * If end is omitted, the characters from start through the end of the original string are returned.
     */
fun substring(start: Double, end: Double = definedExternally): String
/** Converts all the alphabetic characters in a string to lowercase. */
fun toLowerCase(): String
/** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */
fun toLocaleLowerCase(): String

/** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */
fun toLocaleLowerCase(locales: String = definedExternally): String

/** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */
fun toLocaleLowerCase(locales: js.array.ReadonlyArray<String> = definedExternally): String
/** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */
fun toLocaleLowerCase(locales: Intl.LocalesArgument = definedExternally): String
/** Converts all the alphabetic characters in a string to uppercase. */
fun toUpperCase(): String
/** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */
fun toLocaleUpperCase(): String

/** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */
fun toLocaleUpperCase(locales: String = definedExternally): String

/** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */
fun toLocaleUpperCase(locales: js.array.ReadonlyArray<String> = definedExternally): String
/** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */
fun toLocaleUpperCase(locales: Intl.LocalesArgument = definedExternally): String
/** Removes the leading and trailing white space and line terminator characters from a string. */
fun trim(): String
/** Returns the length of a String object. */
val length: Double
// IE extensions
/**
     * Gets a substring beginning at the specified location and having the specified length.
     * @deprecated A legacy feature for browser compatibility
     * @param from The starting position of the desired substring. The index of the first character in the string is zero.
     * @param length The number of characters to include in the returned substring.
     */
fun substr(from: Double, length: Double = definedExternally): String
/** Returns the primitive value of the specified object. */
fun valueOf(): String
operator fun get(key: Double): String?
/**
     * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point
     * value of the UTF-16 encoded code point starting at the string element at position pos in
     * the String resulting from converting this object to a String.
     * If there is no element at that position, the result is undefined.
     * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.
     */
fun codePointAt(pos: Double): Double?
/**
     * Returns true if searchString appears as a substring of the result of converting this
     * object to a String, at one or more positions that are
     * greater than or equal to position; otherwise, returns false.
     * @param searchString search string
     * @param position If position is undefined, 0 is assumed, so as to search all of the String.
     */
fun includes(searchString: String, position: Double = definedExternally): Boolean
fun endsWith(target: String, length: Double = definedExternally): Boolean
/**
     * Returns the String value result of normalizing the string into the normalization form
     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.
     * @param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default
     * is "NFC"
     */
fun normalize(form: StringNormalizeForm): String
/**
     * Returns the String value result of normalizing the string into the normalization form
     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.
     * @param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default
     * is "NFC"
     */
fun normalize(form: String = definedExternally): String
/**
     * Returns a String value that is made from count copies appended together. If count is 0,
     * the empty string is returned.
     * @param count number of copies to append
     */
fun repeat(count: Double): String
fun startsWith(searchString: String, position: Double = definedExternally): Boolean
/**
     * Returns an `<a>` HTML anchor element and sets the name attribute to the text value
     * @deprecated A legacy feature for browser compatibility
     * @param name
     */
fun anchor(name: String): String
/**
     * Returns a `<big>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
fun big(): String
/**
     * Returns a `<blink>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
fun blink(): String
/**
     * Returns a `<b>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
fun bold(): String
/**
     * Returns a `<tt>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
fun fixed(): String
/**
     * Returns a `<font>` HTML element and sets the color attribute value
     * @deprecated A legacy feature for browser compatibility
     */
fun fontcolor(color: String): String
/**
     * Returns a `<font>` HTML element and sets the size attribute value
     * @deprecated A legacy feature for browser compatibility
     */
fun fontsize(size: Double): String
/**
     * Returns a `<font>` HTML element and sets the size attribute value
     * @deprecated A legacy feature for browser compatibility
     */
fun fontsize(size: String): String
/**
     * Returns an `<i>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
fun italics(): String
/**
     * Returns an `<a>` HTML element and sets the href attribute value
     * @deprecated A legacy feature for browser compatibility
     */
fun link(url: String): String
/**
     * Returns a `<small>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
fun small(): String
/**
     * Returns a `<strike>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
fun strike(): String
/**
     * Returns a `<sub>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
fun sub(): String
/**
     * Returns a `<sup>` HTML element
     * @deprecated A legacy feature for browser compatibility
     */
fun sup(): String
/**
     * Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.
     * The padding is applied from the start (left) of the current string.
     *
     * @param maxLength The length of the resulting string once the current string has been padded.
     *        If this parameter is smaller than the current string's length, the current string will be returned as it is.
     *
     * @param fillString The string to pad the current string with.
     *        If this string is too long, it will be truncated and the left-most part will be applied.
     *        The default value for this parameter is " " (U+0020).
     */
fun padStart(maxLength: Double, fillString: String = definedExternally): String
/**
     * Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.
     * The padding is applied from the end (right) of the current string.
     *
     * @param maxLength The length of the resulting string once the current string has been padded.
     *        If this parameter is smaller than the current string's length, the current string will be returned as it is.
     *
     * @param fillString The string to pad the current string with.
     *        If this string is too long, it will be truncated and the left-most part will be applied.
     *        The default value for this parameter is " " (U+0020).
     */
fun padEnd(maxLength: Double, fillString: String = definedExternally): String
/** Removes the trailing white space and line terminator characters from a string. */
fun trimEnd(): String
/** Removes the leading white space and line terminator characters from a string. */
fun trimStart(): String
/**
     * Removes the leading white space and line terminator characters from a string.
     * @deprecated A legacy feature for browser compatibility. Use `trimStart` instead
     */
fun trimLeft(): String
/**
     * Removes the trailing white space and line terminator characters from a string.
     * @deprecated A legacy feature for browser compatibility. Use `trimEnd` instead
     */
fun trimRight(): String
/**
     * Matches a string with a regular expression, and returns an iterable of matches
     * containing the results of that search.
     * @param regexp A variable name or string literal containing the regular expression pattern and flags.
     */
fun matchAll(regexp: RegExp): RegExpStringIterator<RegExpExecArray>
/**
     * Replace all instances of a substring in a string, using a regular expression or search string.
     * @param searchValue A string to search for.
     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.
     */
fun replaceAll(searchValue: String, replaceValue: String): String

/**
     * Replace all instances of a substring in a string, using a regular expression or search string.
     * @param searchValue A string to search for.
     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.
     */
fun replaceAll(searchValue: RegExp, replaceValue: String): String
/**
     * Replace all instances of a substring in a string, using a regular expression or search string.
     * @param searchValue A string to search for.
     * @param replacer A function that returns the replacement text.
     */
fun replaceAll(searchValue: String, replacer: Function<String> /* (substring: string, ...args: any[]) => string */): String

/**
     * Replace all instances of a substring in a string, using a regular expression or search string.
     * @param searchValue A string to search for.
     * @param replacer A function that returns the replacement text.
     */
fun replaceAll(searchValue: RegExp, replacer: Function<String> /* (substring: string, ...args: any[]) => string */): String
/**
     * Returns a new String consisting of the single UTF-16 code unit located at the specified index.
     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
     */
fun at(index: Double): String?
/**
     * Returns true if all leading surrogates and trailing surrogates appear paired and in order.
     */
fun isWellFormed(): Boolean
/**
     * Returns a string where all lone or out-of-order surrogates have been replaced by the Unicode replacement character (U+FFFD).
     */
fun toWellFormed(): String
fun contains(target: String): Boolean
fun format(vararg args: String): String
}
interface NumberConstructor {
/* new (value?: any): Number; */
operator fun  invoke(value: Any? = definedExternally): Double
val prototype: Number
/** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */
val MAX_VALUE: Double
/** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */
val MIN_VALUE: Double
/**
     * A value that is not a number.
     * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.
     */
val NaN: Double
/**
     * A value that is less than the largest negative number that can be represented in JavaScript.
     * JavaScript displays NEGATIVE_INFINITY values as -infinity.
     */
val NEGATIVE_INFINITY: Double
/**
     * A value greater than the largest number that can be represented in JavaScript.
     * JavaScript displays POSITIVE_INFINITY values as infinity.
     */
val POSITIVE_INFINITY: Double
/**
     * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1
     * that is representable as a Number value, which is approximately:
     * 2.2204460492503130808472633361816 x 10‍−‍16.
     */
val EPSILON: Double
/**
     * Returns true if passed value is finite.
     * Unlike the global isFinite, Number.isFinite doesn't forcibly convert the parameter to a
     * number. Only finite values of the type number, result in true.
     * @param number A numeric value.
     */
fun isFinite(number: Any?): Boolean
/**
     * Returns true if the value passed is an integer, false otherwise.
     * @param number A numeric value.
     */
fun isInteger(number: Any?): Boolean
/**
     * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a
     * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter
     * to a number. Only values of the type number, that are also NaN, result in true.
     * @param number A numeric value.
     */
fun isNaN(number: Any?): Boolean
/**
     * Returns true if the value passed is a safe integer.
     * @param number A numeric value.
     */
fun isSafeInteger(number: Any?): Boolean
/**
     * The value of the largest integer n such that n and n + 1 are both exactly representable as
     * a Number value.
     * The value of Number.MAX_SAFE_INTEGER is 9007199254740991 2^53 − 1.
     */
val MAX_SAFE_INTEGER: Double
/**
     * The value of the smallest integer n such that n and n − 1 are both exactly representable as
     * a Number value.
     * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).
     */
val MIN_SAFE_INTEGER: Double
/**
     * Converts a string to a floating-point number.
     * @param string A string that contains a floating-point number.
     */
fun parseFloat(string: String): Double
/**
     * Converts A string to an integer.
     * @param string A string to convert into a number.
     * @param radix A value between 2 and 36 that specifies the base of the number in `string`.
     * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.
     * All other strings are considered decimal.
     */
fun parseInt(string: String, radix: Double = definedExternally): Double
fun isNumber(obj: Any?): Boolean /* obj is number */
}
interface Node {
fun detach(): Unit
fun empty(): Unit
fun <T : Node> insertAfter(node: T, child: Node?): T
fun indexOf(other: Node): Double
fun setChildrenInPlace(children: js.array.ReadonlyArray<Node>): Unit
fun appendText(`val`: String): Unit
/**
         * Cross-window capable instanceof check, a drop-in replacement
         * for instanceof checks on DOM Nodes. Remember to also check
         * for nulls when necessary.
         * @param type
         */
fun <T> instanceOf(type: NodeInstanceOfType<T>): Boolean /* this is T */
/**
         * The document this node belongs to, or the global document.
         */
var doc: Document
/**
         * The window object this node belongs to, or the global window.
         */
var win: Window
var constructorWin: Window
/**
         * Create an element and append it to this node.
         */
fun <K : /* keyof HTMLElementTagNameMap */> createEl(tag: K): HTMLElementTagNameMap

/**
         * Create an element and append it to this node.
         */
fun <K : /* keyof HTMLElementTagNameMap */> createEl(tag: K, o: DomElementInfo = definedExternally, callback: (el: HTMLElementTagNameMap) -> Unit = definedExternally): HTMLElementTagNameMap

/**
         * Create an element and append it to this node.
         */
fun <K : /* keyof HTMLElementTagNameMap */> createEl(tag: K, o: String = definedExternally, callback: (el: HTMLElementTagNameMap) -> Unit = definedExternally): HTMLElementTagNameMap
fun createDiv(): HTMLDivElement

fun createDiv(o: DomElementInfo = definedExternally, callback: (el: HTMLDivElement) -> Unit = definedExternally): HTMLDivElement

fun createDiv(o: String = definedExternally, callback: (el: HTMLDivElement) -> Unit = definedExternally): HTMLDivElement
fun createSpan(): HTMLSpanElement

fun createSpan(o: DomElementInfo = definedExternally, callback: (el: HTMLSpanElement) -> Unit = definedExternally): HTMLSpanElement

fun createSpan(o: String = definedExternally, callback: (el: HTMLSpanElement) -> Unit = definedExternally): HTMLSpanElement
fun <K : /* keyof SVGElementTagNameMap */> createSvg(tag: K): SVGElementTagNameMap

fun <K : /* keyof SVGElementTagNameMap */> createSvg(tag: K, o: SvgElementInfo = definedExternally, callback: (el: SVGElementTagNameMap) -> Unit = definedExternally): SVGElementTagNameMap

fun <K : /* keyof SVGElementTagNameMap */> createSvg(tag: K, o: String = definedExternally, callback: (el: SVGElementTagNameMap) -> Unit = definedExternally): SVGElementTagNameMap
}
interface Element : Node, Node {
fun getText(): String
fun setText(`val`: String): Unit

fun setText(`val`: DocumentFragment): Unit
fun addClass(vararg classes: String): Unit
fun addClasses(classes: js.array.ReadonlyArray<String>): Unit
fun removeClass(vararg classes: String): Unit
fun removeClasses(classes: js.array.ReadonlyArray<String>): Unit
fun toggleClass(classes: String, value: Boolean): Unit

fun toggleClass(classes: js.array.ReadonlyArray<String>, value: Boolean): Unit
fun hasClass(cls: String): Boolean
fun setAttr(qualifiedName: String, value: String?): Unit

fun setAttr(qualifiedName: String, value: Double?): Unit

fun setAttr(qualifiedName: String, value: Boolean?): Unit
fun setAttrs(obj: ElementSetAttrsObj): Unit
fun getAttr(qualifiedName: String): String?
fun matchParent(selector: String, lastParent: Element = definedExternally): Element?
fun getCssPropertyValue(property: String, pseudoElement: String = definedExternally): String
fun isActiveElement(): Boolean
fun find(selector: String): Element?
fun findAll(selector: String): js.array.ReadonlyArray<HTMLElement>
fun findAllSelf(selector: String): js.array.ReadonlyArray<HTMLElement>
}
interface HTMLElement : Element, Element, Element {
fun show(): Unit
fun hide(): Unit
fun toggle(show: Boolean): Unit
fun toggleVisibility(visible: Boolean): Unit
/**
         * Returns whether this element is shown, when the element is attached to the DOM and
         * none of the parent and ancestor elements are hidden with `display: none`.
         *
         * Exception: Does not work on `<body>` and `<html>`, or on elements with `position: fixed`.
         */
fun isShown(): Boolean
fun setCssStyles(styles: Partial<CSSStyleDeclaration>): Unit
fun setCssProps(props: Record<String, String>): Unit
/**
         * Get the inner width of this element without padding.
         */
val innerWidth: Double
/**
         * Get the inner height of this element without padding.
         */
val innerHeight: Double
fun find(selector: String): HTMLElement
fun findAll(selector: String): js.array.ReadonlyArray<HTMLElement>
fun findAllSelf(selector: String): js.array.ReadonlyArray<HTMLElement>
var _EVENTS: (HTMLElement_EVENTS)?
fun <K : /* keyof HTMLElementEventMap */> on(/* this: HTMLElement, */ type: K, selector: String, listener: (/* this: HTMLElement, */ ev: HTMLElementEventMap, delegateTarget: HTMLElement) -> Any?): Unit

fun <K : /* keyof HTMLElementEventMap */> on(/* this: HTMLElement, */ type: K, selector: String, listener: (/* this: HTMLElement, */ ev: HTMLElementEventMap, delegateTarget: HTMLElement) -> Any?, options: Boolean = definedExternally): Unit

fun <K : /* keyof HTMLElementEventMap */> on(/* this: HTMLElement, */ type: K, selector: String, listener: (/* this: HTMLElement, */ ev: HTMLElementEventMap, delegateTarget: HTMLElement) -> Any?, options: AddEventListenerOptions = definedExternally): Unit
fun <K : /* keyof HTMLElementEventMap */> off(/* this: HTMLElement, */ type: K, selector: String, listener: (/* this: HTMLElement, */ ev: HTMLElementEventMap, delegateTarget: HTMLElement) -> Any?): Unit

fun <K : /* keyof HTMLElementEventMap */> off(/* this: HTMLElement, */ type: K, selector: String, listener: (/* this: HTMLElement, */ ev: HTMLElementEventMap, delegateTarget: HTMLElement) -> Any?, options: Boolean = definedExternally): Unit

fun <K : /* keyof HTMLElementEventMap */> off(/* this: HTMLElement, */ type: K, selector: String, listener: (/* this: HTMLElement, */ ev: HTMLElementEventMap, delegateTarget: HTMLElement) -> Any?, options: AddEventListenerOptions = definedExternally): Unit
fun onClickEvent(/* this: HTMLElement, */ listener: (/* this: HTMLElement, */ ev: MouseEvent) -> Any?): Unit

fun onClickEvent(/* this: HTMLElement, */ listener: (/* this: HTMLElement, */ ev: MouseEvent) -> Any?, options: Boolean = definedExternally): Unit

fun onClickEvent(/* this: HTMLElement, */ listener: (/* this: HTMLElement, */ ev: MouseEvent) -> Any?, options: AddEventListenerOptions = definedExternally): Unit
/**
         * @param listener - the callback to call when this node is inserted into the DOM.
         * @param once - if true, this will only fire once and then unhook itself.
         * @returns destroy - a function to remove the event handler to avoid memory leaks.
         */
fun onNodeInserted(/* this: HTMLElement, */ listener: () -> Any?, once: Boolean = definedExternally): () -> Unit
/**
         * @param listener - the callback to call when this node has been migrated to another window.
         * @returns destroy - a function to remove the event handler to avoid memory leaks.
         */
fun onWindowMigrated(/* this: HTMLElement, */ listener: (win: Window) -> Any?): () -> Unit
fun trigger(eventType: String): Unit
}
interface SVGElement : Element {
fun setCssStyles(styles: Partial<CSSStyleDeclaration>): Unit
fun setCssProps(props: Record<String, String>): Unit
}
fun isBoolean(obj: Any?): Boolean /* obj is boolean */
fun fish(selector: String): HTMLElement?
fun fishAll(selector: String): js.array.ReadonlyArray<HTMLElement>


interface DocumentFragment : Node, NonElementParentNode, ParentNode {
fun find(selector: String): HTMLElement
fun findAll(selector: String): js.array.ReadonlyArray<HTMLElement>
}
interface DomElementInfo {
/**
         * The class to be assigned. Can be a space-separated string or an array of strings.
         */
var cls: (Any /* string | string[] */)?
/**
         * The textContent to be assigned.
         */
var text: (Any /* string | DocumentFragment */)?
/**
         * HTML attributes to be added.
         */
var attr: (DomElementInfoAttr)?
/**
         * HTML title (for hover tooltip).
         */
var title: String?
/**
         * The parent element to be assigned to.
         */
var parent: Node?
var value: String?
var type: String?
var prepend: Boolean?
var placeholder: String?
var href: String?
}
interface SvgElementInfo {
/**
         * The class to be assigned. Can be a space-separated string or an array of strings.
         */
var cls: (Any /* string | string[] */)?
/**
         * HTML attributes to be added.
         */
var attr: (SvgElementInfoAttr)?
/**
         * The parent element to be assigned to.
         */
var parent: Node?
var prepend: Boolean?
}

fun <K : /* keyof HTMLElementTagNameMap */> createEl(tag: K): HTMLElementTagNameMap

fun <K : /* keyof HTMLElementTagNameMap */> createEl(tag: K, o: DomElementInfo = definedExternally, callback: (el: HTMLElementTagNameMap) -> Unit = definedExternally): HTMLElementTagNameMap

fun <K : /* keyof HTMLElementTagNameMap */> createEl(tag: K, o: String = definedExternally, callback: (el: HTMLElementTagNameMap) -> Unit = definedExternally): HTMLElementTagNameMap
fun createDiv(): HTMLDivElement

fun createDiv(o: DomElementInfo = definedExternally, callback: (el: HTMLDivElement) -> Unit = definedExternally): HTMLDivElement

fun createDiv(o: String = definedExternally, callback: (el: HTMLDivElement) -> Unit = definedExternally): HTMLDivElement
fun createSpan(): HTMLSpanElement

fun createSpan(o: DomElementInfo = definedExternally, callback: (el: HTMLSpanElement) -> Unit = definedExternally): HTMLSpanElement

fun createSpan(o: String = definedExternally, callback: (el: HTMLSpanElement) -> Unit = definedExternally): HTMLSpanElement
fun <K : /* keyof SVGElementTagNameMap */> createSvg(tag: K): SVGElementTagNameMap

fun <K : /* keyof SVGElementTagNameMap */> createSvg(tag: K, o: SvgElementInfo = definedExternally, callback: (el: SVGElementTagNameMap) -> Unit = definedExternally): SVGElementTagNameMap

fun <K : /* keyof SVGElementTagNameMap */> createSvg(tag: K, o: String = definedExternally, callback: (el: SVGElementTagNameMap) -> Unit = definedExternally): SVGElementTagNameMap
fun createFragment(callback: (el: DocumentFragment) -> Unit = definedExternally): DocumentFragment
interface EventListenerInfo {
var selector: String
var listener: Function
var options: Any? /* boolean | AddEventListenerOptions */
var callback: Function
}

interface Document {
var _EVENTS: (Document_EVENTS)?
fun <K : /* keyof DocumentEventMap */> on(/* this: Document, */ type: K, selector: String, listener: (/* this: Document, */ ev: DocumentEventMap, delegateTarget: HTMLElement) -> Any?): Unit

fun <K : /* keyof DocumentEventMap */> on(/* this: Document, */ type: K, selector: String, listener: (/* this: Document, */ ev: DocumentEventMap, delegateTarget: HTMLElement) -> Any?, options: Boolean = definedExternally): Unit

fun <K : /* keyof DocumentEventMap */> on(/* this: Document, */ type: K, selector: String, listener: (/* this: Document, */ ev: DocumentEventMap, delegateTarget: HTMLElement) -> Any?, options: AddEventListenerOptions = definedExternally): Unit
fun <K : /* keyof DocumentEventMap */> off(/* this: Document, */ type: K, selector: String, listener: (/* this: Document, */ ev: DocumentEventMap, delegateTarget: HTMLElement) -> Any?): Unit

fun <K : /* keyof DocumentEventMap */> off(/* this: Document, */ type: K, selector: String, listener: (/* this: Document, */ ev: DocumentEventMap, delegateTarget: HTMLElement) -> Any?, options: Boolean = definedExternally): Unit

fun <K : /* keyof DocumentEventMap */> off(/* this: Document, */ type: K, selector: String, listener: (/* this: Document, */ ev: DocumentEventMap, delegateTarget: HTMLElement) -> Any?, options: AddEventListenerOptions = definedExternally): Unit
}
interface UIEvent : Event {
var targetNode: Node?
var win: Window
var doc: Document
/**
         * Cross-window capable instanceof check, a drop-in replacement
         * for instanceof checks on UIEvents.
         * @param type
         */
fun <T> instanceOf(type: UIEventInstanceOfType<T>): Boolean /* this is T */
}
interface AjaxOptions {
var method: (AjaxOptionsMethod)?
var url: String
var success: ((response: Any?, req: XMLHttpRequest) -> Any?)?
var error: ((error: Any?, req: XMLHttpRequest) -> Any?)?
var data: (Any /* object | string | ArrayBuffer */)?
var headers: Record<String, String>?
var withCredentials: Boolean?
var req: XMLHttpRequest
}
fun ajax(options: AjaxOptions): Unit
fun ajaxPromise(options: AjaxOptions): Promise<Any?>
fun ready(fn: () -> Any?): Unit
fun sleep(ms: Double): Promise<js.core.Void>
fun nextFrame(): Promise<js.core.Void>
/**
     * The actively focused Window object. This is usually the same as `window` but
     * it will be different when using popout windows.
     */
var activeWindow: Window
/**
     * The actively focused Document object. This is usually the same as `document` but
     * it will be different when using popout windows.
     */
var activeDocument: Document
interface Window : EventTarget, AnimationFrameProvider, GlobalEventHandlers, WindowEventHandlers, WindowLocalStorage, WindowOrWorkerGlobalScope, WindowSessionStorage {
/**
         * The actively focused Window object. This is usually the same as `window` but
         * it will be different when using popout windows.
         */
var activeWindow: Window
/**
         * The actively focused Document object. This is usually the same as `document` but
         * it will be different when using popout windows.
         */
var activeDocument: Document
fun sleep(ms: Double): Promise<js.core.Void>
fun nextFrame(): Promise<js.core.Void>
}
interface Touch {
var touchType: TouchTouchType
}
}

/**
 * Attach to an `<input>` element or a `<div contentEditable>` to add type-ahead
 * support.
 *
 * @public
 * @since 1.4.10
 */
external class AbstractInputSuggest<T> : PopoverSuggest<T> {
/**
     * Accepts an `<input>` text box or a contenteditable div.
     * @public
     */
constructor (app: App, textInputEl: HTMLInputElement)

/**
     * Accepts an `<input>` text box or a contenteditable div.
     * @public
     */
constructor (app: App, textInputEl: HTMLDivElement)
/**
     * Limit to the number of elements rendered at once. Set to 0 to disable. Defaults to 100.
     * @public
     * @since 1.4.10
     */
var limit: Double
/**
     * Sets the value into the input element.
     * @public
     * @since 1.4.10
     */
fun setValue(value: String): Unit
/**
     * Gets the value from the input element.
     * @public
     * @since 1.4.10
     */
fun getValue(): String
/**
     * @public
     * @since 1.5.7
     */
fun getSuggestions(query: String): Any /* T[] | Promise<T[]> */
/**
     * @public
     * @since 1.6.6
     */
fun selectSuggestion(value: T, evt: MouseEvent): Unit

/**
     * @public
     * @since 1.6.6
     */
fun selectSuggestion(value: T, evt: KeyboardEvent): Unit
/**
     * Registers a callback to handle when a suggestion is selected by the user.
     * @public
     * @since 1.4.10
     */
fun onSelect(callback: (value: T, evt: Any? /* MouseEvent | KeyboardEvent */) -> Any?): Unit /* this */
}

/**
 * @public
 * @since 0.9.21
 */
external class AbstractTextComponent<T : Any? /* HTMLInputElement | HTMLTextAreaElement */> : ValueComponent<String> {
/**
     * @public
     */
constructor (inputEl: T)
/**
     * @public
     * @since 0.9.7
     */
var inputEl: T
/**
     * @public
     * @since 1.2.3
     */
fun setDisabled(disabled: Boolean): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun getValue(): String
/**
     * @public
     * @since 0.9.7
     */
fun setValue(value: String): Unit /* this */
/**
     * @public
     * 0.9.7
     */
fun setPlaceholder(placeholder: String): Unit /* this */
/**
     * @public
     * 0.9.21
     */
fun onChanged(): Unit
/**
     * @public
     * 0.9.7
     */
fun onChange(callback: (value: String) -> Any?): Unit /* this */
}

/**
 * Adds an icon to the library.
 * @param iconId - the icon ID
 * @param svgContent - the content of the SVG.
 * @public
 */
external fun addIcon(iconId: String, svgContent: String): Unit

/**
 * This is the API version of the app, which follows the release cycle of the desktop app.
 * Example: '0.13.21'
 * @public
 */
external var apiVersion: String

/**
 * @public
 * @since 0.9.7
 */
external class App {
/**
     * @public
     * @since 0.9.7
     */
var keymap: Keymap
/**
     * @public
     * @since 0.9.7
     */
var scope: Scope
/**
     * @public
     * @since 0.9.7
     */
var workspace: Workspace
/**
     * @public
     * @since 0.9.7
     */
var vault: Vault
/**
     * @public
     * @since 0.9.7
     */
var metadataCache: MetadataCache
/**
     * @public
     * @since 0.11.0
     */
var fileManager: FileManager
/**
     * The last known user interaction event, to help commands find out what modifier keys are pressed.
     * @public
     * @since 0.12.17
     */
var lastEvent: UserEvent
/**
     * @public
     * @since 1.10.0
     */
var renderContext: RenderContext
/**
     * @public
     * @since 1.10.0
     */
fun isDarkMode(): Boolean
/**
     * Retrieve value from `localStorage` for this vault.
     * @param key
     * @public
     * @since 1.8.7
     */
fun loadLocalStorage(key: String): Any?
/**
     * Save vault-specific value to `localStorage`. If data is `null`, the entry will be cleared.
     * @param key
     * @param data value being saved to localStorage. Must be serializable.
     * @public
     * @since 1.8.7
     */
fun saveLocalStorage(key: String, data: Any?): Unit
}

/** @public */
external fun arrayBufferToBase64(buffer: ArrayBuffer): String

/** @public */
external fun arrayBufferToHex(data: ArrayBuffer): String

/** @public */
external fun base64ToArrayBuffer(base64: String): ArrayBuffer

/**
 * @public
 * @since 0.10.3
 */
external class BaseComponent {
/**
     * @public
     * @since 0.10.3
     */
var disabled: Boolean
/**
     * Facilitates chaining
     * @public
     * @since 0.9.7
     */
fun then(cb: (component: Unit /* this */) -> Any?): Unit /* this */
/**
     * @public
     * @since 1.2.3
     */
fun setDisabled(disabled: Boolean): Unit /* this */
}

/**
 * @public
 * @since 1.10.0
 */
external interface BaseOption {
/**
     * @public
     * @since 1.10.0
     */
var key: String
/**
     * @public
     * @since 1.10.0
     */
var type: String
/**
     * @public
     * @since 1.10.0
     */
var displayName: String
}

/**
 * Represent a single "row" or file in a base.
 * @public
 * @since 1.10.0
 */
external class BasesEntry : FormulaContext {
/**
     * @public
     * @since 1.10.0
     */
var file: TFile
/**
     * Get the value of the property.
     * @throws Error if the property is a formula and cannot be evaluated.
     * @public
     * @since 1.10.0
     */
fun getValue(propertyId: BasesPropertyId): Value?
}

/**
 * A group of BasesEntry objects for a given value of the groupBy key.
 * If there are entries in the results which do not have a value for the
 * groupBy key, the key will be the {@link NullValue}.
 * @public
 * @since 1.10.0
 */
external class BasesEntryGroup {
/**
     * The value of the groupBy key for this entry group.
     * @public
     * @since 1.10.0
     */
var key: Value?
/**
     * @public
     * @since 1.10.0
     */
var entries: js.array.ReadonlyArray<BasesEntry>
/**
     * @returns true iff this entry group has a non-null key.
     * @public
     * @since 1.10.0
     */
fun hasKey(): Boolean
}

/**
 * A parsed version of the {@link BasesPropertyId}.
 *
 * @public
 * @since 1.10.0
 */
external interface BasesProperty {
/**
     * @public
     * @since 1.10.0
     */
var type: BasesPropertyType
/**
     * @public
     * @since 1.10.0
     */
var name: String
}

/**
 * The full ID of a property, used in the bases config file. The prefixed
 * {@link BasesPropertyType} disambiguates properties of the same name but from different sources.
 *
 * @public
 * @since 1.10.0
 */
typealias BasesPropertyId = String /* `${BasesPropertyType}.${string}` */

/**
 * The three valid "sources" of a property in a Base.
 *
 * - `note`: Properties from the frontmatter of markdown files in the vault.
 * - `formula`: Properties calculated by evaluating a formula from the base config file.
 * - `file`: Properties inherent to a file, such as the name, extension, size, etc.
 *
 * @public
 * @since 1.10.0
 */
sealed external interface BasesPropertyType {
companion object {
@seskar.js.JsValue("note")
val note: BasesPropertyType
@seskar.js.JsValue("formula")
val formula: BasesPropertyType
@seskar.js.JsValue("file")
val file: BasesPropertyType
}
}

/**
 * The BasesQueryResult contains all of the available information from executing the
 * bases query, applying filters, and evaluating formulas. The `data` or `groupedData`
 * should be displayed by your view.
 *
 * @public
 * @since 1.10.0
 */
external class BasesQueryResult {
/**
     * A ungrouped version of the data, with user-configured sort and limit applied.
     * Where appropriate, views should support groupBy by using `groupedData` instead of this value.
     *
     * @public
     * @since 1.10.0
     */
var data: js.array.ReadonlyArray<BasesEntry>
/**
     * The data to be rendered, grouped according to the groupBy config.
     * If there is no groupBy configured, returns a single group with an empty key.
     * @public
     * @since 1.10.0
     */
val groupedData: js.array.ReadonlyArray<BasesEntryGroup>
/**
     * Visible properties defined by the user.
     * @public
     * @since 1.10.0
     */
val properties: js.array.ReadonlyArray<BasesPropertyId>
/**
     * Applies a summary function to a single property over a set of entries.
     * @public
     * @since 1.10.0
     */
fun getSummaryValue(queryController: QueryController, entries: js.array.ReadonlyArray<BasesEntry>, prop: BasesPropertyId, summaryKey: String): Value
}

/**
 * @public
 * @since 1.10.0
 */
external interface BasesSortConfig {
/**
     * @public
     * @since 1.10.0
     */
var property: BasesPropertyId
/**
     * @public
     * @since 1.10.0
     */
var direction: BasesSortConfigDirection
}

/**
 * Plugins can create a class which extends this in order to render a Base.
 * Plugins should create a {@link BaseViewHandlerFactory} function, then call
 * `plugin.registerView` to register the view factory.
 *
 * @public
 * @since 1.10.0
 */
external class BasesView : Component {
/**
     * @public
     * @since 1.10.0
     */
constructor (controller: QueryController)
/**
     * The type ID of this view
     * @public
     * @since 1.10.0
     */
var type: String
/**
     * @public
     * @since 1.10.0
     */
var app: App
/**
     * The config object for this view.
     * @public
     * @since 1.10.0
     */
var config: BasesViewConfig
/**
     * All available properties from the dataset.
     * @public
     * @since 1.10.0
     */
var allProperties: js.array.ReadonlyArray<BasesPropertyId>
/**
     * The most recent output from executing the bases query, applying filters, and evaluating formulas.
     * This object will be replaced with a new result set when changes to the vault or Bases config occur,
     * so views should not keep a reference to it. Also note the contained BasesEntry objects will be recreated.
     * @public
     * @since 1.10.0
     */
var data: BasesQueryResult
/**
     * Called when there is new data for the query. This view should rerender with the updated data.
     * @public
     * @since 1.10.0
     */
fun onDataUpdated(): Unit
}

/**
 * The in-memory representation of a single entry in the "views" section of a Bases file.
 * Contains settings and configuration options set by the user from the toolbar menus and view options.
 * @public
 * @since 1.10.0
 */
external class BasesViewConfig {
/**
     * User-friendly name for this view.
     * @public
     * @since 1.10.0
     */
var name: String
/**
     * Retrieve the user-configured value of options exposed in `BasesViewRegistration.options`.
     * @public
     * @since 1.10.0
     */
fun get(key: String): Any?
/**
     * Retrieve a user-configured value from the config, converting it to a BasesPropertyId.
     * Returns null if the requested key is not present in the config, or if the value is invalid.
     * @public
     * @since 1.10.0
     */
fun getAsPropertyId(key: String): BasesPropertyId?
/**
     * Store configuration data for the view. Views should prefer `BasesViewRegistration.options`
     * to allow users to configure options where appropriate.
     * @public
     * @since 1.10.0
     */
fun set(key: String, value: Any?): Unit
/**
     * Ordered list of properties to display in this view.
     * In a table, these can be interpreted as the list of visible columns.
     * Order is configured by the user through the properties toolbar menu.
     * @public
     * @since 1.10.0
     */
fun getOrder(): js.array.ReadonlyArray<BasesPropertyId>
/**
     * Retrieve the sorting config for this view. Sort is configured by the user through the sort toolbar menu.
     * Removes invalid sort configs. If no (valid) sort config, returns an empty array.
     * Does not validate that the properties exists.
     *
     * Note that data from BasesQueryResult will be presorted.
     *
     * @public
     * @since 1.10.0
     */
fun getSort(): js.array.ReadonlyArray<BasesSortConfig>
/**
     * Retrieve a friendly name for the provided property.
     * If the property has been renamed by the user in the Base config, that value is returned.
     * File properties may have a default name that is returned, otherwise the name with the property
     * type prefix removed is returned.
     *
     * @public
     * @since 1.10.0
     */
fun getDisplayName(propertyId: BasesPropertyId): String
}

/**
 * Implement this factory function in a {@link BasesViewRegistration} to create a
 * new instance of a custom Bases view.
 * @param containerEl - The container below the Bases toolbar where the view will be displayed.
 * @public
 * @since 1.10.0
 */
typealias BasesViewFactory = (controller: QueryController, containerEl: HTMLElement) -> BasesView

/**
 * Container for options when registering a new Bases view type.
 * @public
 * @since 1.10.0
 */
external interface BasesViewRegistration {
/**
     * @public
     * @since 1.10.0
     */
var name: String
/**
     * Icon ID to be used in the Bases view selector.
     * See {@link https://docs.obsidian.md/Plugins/User+interface/Icons} for available icons and how to add your own.
     * @public
     * @since 1.10.0
     */
var icon: IconName
/**
     * @public
     * @since 1.10.0
     */
var factory: BasesViewFactory
/**
     * @public
     * @since 1.10.0
     */
var options: (() -> js.array.ReadonlyArray<ViewOption>)?
}

/**
 * @public
 * @since 0.11.13
 */
external interface BlockCache : CacheItem {
/** @public */
var id: String
}

/**
 * @public
 * @since 0.13.26
 */
external interface BlockSubpathResult : SubpathResult {
/**
     * @public
     */
var type: String /* 'block' */
/**
     * @public
     */
var block: BlockCache
/**
     * @public
     */
var list: ListItemCache?
}

/**
 * {@link Value} wrapping a boolean.
 * @public
 * @since 1.10.0
 */
external class BooleanValue : PrimitiveValue<Boolean> {
/**
     * @public
     * @since 1.10.0
     */
constructor (value: T)
companion object {
/**
     * @public
     * @since 1.10.0
     */
var type: String
}
}

/**
 * @public
 * @since 0.9.7
 */
external class ButtonComponent : BaseComponent {
/**
     * @public
     */
constructor (containerEl: HTMLElement)
/**
     * @public
     * @since 0.9.7
     */
var buttonEl: HTMLButtonElement
/**
     * @public
     * @since 1.2.3
     */
fun setDisabled(disabled: Boolean): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun setCta(): Unit /* this */
/**
     * @public
     * @since 0.9.20
     */
fun removeCta(): Unit /* this */
/**
     * @public
     * @since 0.11.0
     */
fun setWarning(): Unit /* this */
/**
     * @public
     * @since 1.1.0
     */
fun setTooltip(tooltip: String, options: TooltipOptions = definedExternally): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun setButtonText(name: String): Unit /* this */
/**
     * @public
     * @since 1.1.0
     */
fun setIcon(icon: IconName): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun setClass(cls: String): Unit /* this */
/**
     * @public
     * @since 0.12.16
     */
fun onClick(callback: (evt: MouseEvent) -> Any? /* unknown | Promise<unknown> */): Unit /* this */
}

/**
 * @public
 */
external interface CachedMetadata {
/**
     * @public
     */
var links: js.array.ReadonlyArray<LinkCache>?
/**
     * @public
     */
var embeds: js.array.ReadonlyArray<EmbedCache>?
/**
     * @public
     */
var tags: js.array.ReadonlyArray<TagCache>?
/**
     * @public
     */
var headings: js.array.ReadonlyArray<HeadingCache>?
/**
     * @public
     * @since 1.6.6
     */
var footnotes: js.array.ReadonlyArray<FootnoteCache>?
/**
     * @public
     * @since 1.8.7
     */
var footnoteRefs: js.array.ReadonlyArray<FootnoteRefCache>?
/**
     * @public
     * @since 1.8.7
     */
var referenceLinks: js.array.ReadonlyArray<ReferenceLinkCache>?
/**
     * Sections are root level markdown blocks, which can be used to divide the document up.
     * @public
     */
var sections: js.array.ReadonlyArray<SectionCache>?
/**
     * @public
     */
var listItems: js.array.ReadonlyArray<ListItemCache>?
/**
     * @public
     */
var frontmatter: FrontMatterCache?
/**
     * Position of the frontmatter in the file.
     * @public
     * @since 1.4.0
     */
var frontmatterPosition: Pos?
/**
     * @public
     * @since 1.4.0
     */
var frontmatterLinks: js.array.ReadonlyArray<FrontmatterLinkCache>?
/**
     * @public
     */
var blocks: Record<String, BlockCache>?
}

/**
 * @public
 */
external interface CacheItem {
/**
     * Position of this item in the note.
     * @public
     */
var position: Pos
}

/**
 * Implementation of the vault adapter for mobile devices.
 * @public
 * @since 1.7.2
 */
external class CapacitorAdapter : DataAdapter {
/**
     * @public
     * @since 1.7.2
     */
fun getName(): String
/**
     * @public
     * @since 1.7.2
     */
fun mkdir(normalizedPath: String): Promise<js.core.Void>
/**
     * @public
     * @since 1.7.2
     */
fun trashSystem(normalizedPath: String): Promise<Boolean>
/**
     * @public
     * @since 1.7.2
     */
fun trashLocal(normalizedPath: String): Promise<js.core.Void>
/**
     * @public
     * @since 1.7.2
     */
fun rmdir(normalizedPath: String, recursive: Boolean): Promise<js.core.Void>
/**
     * @public
     * @since 1.7.2
     */
fun read(normalizedPath: String): Promise<String>
/**
     * @public
     * @since 1.7.2
     */
fun readBinary(normalizedPath: String): Promise<ArrayBuffer>
/**
     * @public
     * @since 1.7.2
     */
fun write(normalizedPath: String, data: String, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * @public
     * @since 1.7.2
     */
fun writeBinary(normalizedPath: String, data: ArrayBuffer, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * @public
     * @since 1.7.2
     */
fun append(normalizedPath: String, data: String, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * @public
     * @since 1.7.2
     */
fun process(normalizedPath: String, fn: (data: String) -> String, options: DataWriteOptions = definedExternally): Promise<String>
/**
     * @public
     * @since 1.7.2
     */
fun getResourcePath(normalizedPath: String): String
/**
     * @public
     * @since 1.7.2
     */
fun remove(normalizedPath: String): Promise<js.core.Void>
/**
     * @public
     * @since 1.7.2
     */
fun rename(normalizedPath: String, normalizedNewPath: String): Promise<js.core.Void>
/**
     * @public
     * @since 1.7.2
     */
fun copy(normalizedPath: String, normalizedNewPath: String): Promise<js.core.Void>
/**
     * @public
     * @since 1.7.2
     */
fun exists(normalizedPath: String, sensitive: Boolean = definedExternally): Promise<Boolean>
/**
     * @public
     * @since 1.7.2
     */
fun stat(normalizedPath: String): Promise<Stat?>
/**
     * @public
     * @since 1.7.2
     */
fun list(normalizedPath: String): Promise<ListedFiles>
/**
     * @public
     * @since 1.7.2
     */
fun getFullPath(normalizedPath: String): String
}

/**
 * A closeable component that can get dismissed via the Android 'back' button.
 * @public
 */
external interface CloseableComponent {
/** @public */
fun close(): Unit
}

/**
 * Color picker component. Values are by default 6-digit hash-prefixed hex strings like `#000000`.
 * @public
 * @since 1.0.0
 */
external class ColorComponent : ValueComponent<String> {
/**
     * @public
     */
constructor (containerEl: HTMLElement)
/**
     * @public
     * @since 1.2.3
     */
fun setDisabled(disabled: Boolean): Unit /* this */
/**
     * @public
     * @since 1.0.0
     */
fun getValue(): HexString
/**
     * @public
     * @since 1.0.0
     */
fun getValueRgb(): RGB
/**
     * @public
     * @since 1.0.0
     */
fun getValueHsl(): HSL
/**
     * @public
     * @since 1.0.0
     */
fun setValue(value: HexString): Unit /* this */
/**
     * @public
     * @since 1.0.0
     */
fun setValueRgb(rgb: RGB): Unit /* this */
/**
     * @public
     * @since 1.0.0
     */
fun setValueHsl(hsl: HSL): Unit /* this */
/**
     * @public
     * @since 1.0.0
     */
fun onChange(callback: (value: String) -> Any?): Unit /* this */
}

/**
 * @public
 */
external interface Command {
/**
     * Globally unique ID to identify this command.
     * @public
     */
var id: String
/**
     * Human friendly name for searching.
     * @public
     */
var name: String
/**
     * Icon ID to be used in the toolbar.
     * See {@link https://docs.obsidian.md/Plugins/User+interface/Icons} for available icons and how to add your own.
     * @public
     */
var icon: IconName?
/** @public */
var mobileOnly: Boolean?
/**
     * Whether holding the hotkey should repeatedly trigger this command.
     * @defaultValue false
     * @public
     */
var repeatable: Boolean?
/**
     * Simple callback, triggered globally.
     * @example
     * ```ts
     * this.addCommand({
     *   id: 'print-greeting-to-console',
     *   name: 'Print greeting to console',
     *   callback: () => {
     *     console.log('Hey, you!');
     *   },
     * });
     * ```
     * @public
     */
var callback: (() -> Any?)?
/**
     * Complex callback, overrides the simple callback.
     * Used to 'check' whether your command can be performed in the current circumstances.
     * For example, if your command requires the active focused pane to be a MarkdownView, then
     * you should only return true if the condition is satisfied. Returning false or undefined causes
     * the command to be hidden from the command palette.
     *
     * @param checking - Whether the command palette is just 'checking' if your command should show right now.
     * If checking is true, then this function should not perform any action.
     * If checking is false, then this function should perform the action.
     * @returns Whether this command can be executed at the moment.
     *
     * @example
     * ```ts
     * this.addCommand({
     *   id: 'example-command',
     *   name: 'Example command',
     *   checkCallback: (checking: boolean) => {
     *     const value = getRequiredValue();
     *
     *     if (value) {
     *       if (!checking) {
     *         doCommand(value);
     *       }
     *       return true;
     *     }
     *
     *     return false;
     *   }
     * });
     * ```
     *
     * @public
     */
var checkCallback: ((checking: Boolean) -> Any /* boolean | void */)?
/**
     * A command callback that is only triggered when the user is in an editor.
     * Overrides `callback` and `checkCallback`
     * @example
     * ```ts
     * this.addCommand({
     *   id: 'example-command',
     *   name: 'Example command',
     *   editorCallback: (editor: Editor, view: MarkdownView) => {
     *     const sel = editor.getSelection();
     *
     *     console.log(`You have selected: ${sel}`);
     *   }
     * });
     * ```
     * @public
     * @since 0.12.2
     */
var editorCallback: ((editor: Editor, ctx: Any /* MarkdownView | MarkdownFileInfo */) -> Any?)?
/**
     * A command callback that is only triggered when the user is in an editor.
     * Overrides `editorCallback`, `callback` and `checkCallback`
     * @example
     * ```ts
     * this.addCommand({
     *   id: 'example-command',
     *   name: 'Example command',
     *   editorCheckCallback: (checking: boolean, editor: Editor, view: MarkdownView) => {
     *     const value = getRequiredValue();
     *
     *     if (value) {
     *       if (!checking) {
     *         doCommand(value);
     *       }
     *
     *       return true;
     *     }
     *
     *     return false;
     *   }
     * });
     * ```
     * @public
     * @since 0.12.2
     */
var editorCheckCallback: ((checking: Boolean, editor: Editor, ctx: Any /* MarkdownView | MarkdownFileInfo */) -> Any /* boolean | void */)?
/**
     * Sets the default hotkey. It is recommended for plugins to avoid setting default hotkeys if possible,
     * to avoid conflicting hotkeys with one that's set by the user, even though customized hotkeys have higher priority.
     * @public
     */
var hotkeys: js.array.ReadonlyArray<Hotkey>?
}

/**
 * @public
 * @since 0.9.7
 */
external class Component {
/**
     * Load this component and its children
     * @public
     * @since 0.9.7
     */
fun load(): Unit
/**
     * Override this to load your component
     * @public
     * @virtual
     * @since 0.9.7
     */
open fun onload(): Unit
/**
     * Unload this component and its children
     * @public
     * @since 0.9.7
     */
fun unload(): Unit
/**
     * Override this to unload your component
     * @public
     * @virtual
     * @since 0.9.7
     */
fun onunload(): Unit
/**
     * Adds a child component, loading it if this component is loaded
     * @public
     * @since 0.12.0
     */
fun <T : Component> addChild(component: T): T
/**
     * Removes a child component, unloading it
     * @public
     * @since 0.12.0
     */
fun <T : Component> removeChild(component: T): T
/**
     * Registers a callback to be called when unloading
     * @public
     * @since 0.9.7
     */
fun register(cb: () -> Any?): Unit
/**
     * Registers an event to be detached when unloading
     * @public
     * @since 0.9.7
     */
fun registerEvent(eventRef: EventRef): Unit
/**
     * Registers an DOM event to be detached when unloading
     * @public
     * @since 0.14.8
     */
fun <K : /* keyof WindowEventMap */> registerDomEvent(el: Window, type: K, callback: (/* this: HTMLElement, */ ev: WindowEventMap) -> Any?): Unit

/**
     * Registers an DOM event to be detached when unloading
     * @public
     * @since 0.14.8
     */
fun <K : /* keyof WindowEventMap */> registerDomEvent(el: Window, type: K, callback: (/* this: HTMLElement, */ ev: WindowEventMap) -> Any?, options: Boolean = definedExternally): Unit

/**
     * Registers an DOM event to be detached when unloading
     * @public
     * @since 0.14.8
     */
fun <K : /* keyof WindowEventMap */> registerDomEvent(el: Window, type: K, callback: (/* this: HTMLElement, */ ev: WindowEventMap) -> Any?, options: AddEventListenerOptions = definedExternally): Unit
/**
     * Registers an DOM event to be detached when unloading
     * @public
     * @since 0.14.8
     */
fun <K : /* keyof DocumentEventMap */> registerDomEvent(el: Document, type: K, callback: (/* this: HTMLElement, */ ev: DocumentEventMap) -> Any?): Unit

/**
     * Registers an DOM event to be detached when unloading
     * @public
     * @since 0.14.8
     */
fun <K : /* keyof DocumentEventMap */> registerDomEvent(el: Document, type: K, callback: (/* this: HTMLElement, */ ev: DocumentEventMap) -> Any?, options: Boolean = definedExternally): Unit

/**
     * Registers an DOM event to be detached when unloading
     * @public
     * @since 0.14.8
     */
fun <K : /* keyof DocumentEventMap */> registerDomEvent(el: Document, type: K, callback: (/* this: HTMLElement, */ ev: DocumentEventMap) -> Any?, options: AddEventListenerOptions = definedExternally): Unit
/**
     * Registers an DOM event to be detached when unloading
     * @public
     * @since 0.14.8
     */
fun <K : /* keyof HTMLElementEventMap */> registerDomEvent(el: HTMLElement, type: K, callback: (/* this: HTMLElement, */ ev: HTMLElementEventMap) -> Any?): Unit

/**
     * Registers an DOM event to be detached when unloading
     * @public
     * @since 0.14.8
     */
fun <K : /* keyof HTMLElementEventMap */> registerDomEvent(el: HTMLElement, type: K, callback: (/* this: HTMLElement, */ ev: HTMLElementEventMap) -> Any?, options: Boolean = definedExternally): Unit

/**
     * Registers an DOM event to be detached when unloading
     * @public
     * @since 0.14.8
     */
fun <K : /* keyof HTMLElementEventMap */> registerDomEvent(el: HTMLElement, type: K, callback: (/* this: HTMLElement, */ ev: HTMLElementEventMap) -> Any?, options: AddEventListenerOptions = definedExternally): Unit
/**
     * Registers an interval (from setInterval) to be cancelled when unloading
     * Use {@link window.setInterval} instead of {@link setInterval} to avoid TypeScript confusing between NodeJS vs Browser API
     * @public
     * @since 0.13.8
     */
fun registerInterval(id: Double): Double
}

/** @public */
typealias Constructor<T> = js.function.ConstructorFunction<js.array.VariadicTuple, T> /* abstract new (...args: any[]) => T */

/**
 * Work directly with files and folders inside a vault.
 * If possible prefer using the {@link Vault} API over this.
 * @public
 */
external interface DataAdapter {
/**
     * @public
     */
fun getName(): String
/**
     * Check if something exists at the given path. For a faster way to synchronously check
     * if a note or attachment is in the vault, use {@link Vault.getAbstractFileByPath}.
     * @param normalizedPath - path to file/folder, use {@link normalizePath} to normalize beforehand.
     * @param sensitive - Some file systems/operating systems are case-insensitive, set to true to force a case-sensitivity check.
     * @public
     */
fun exists(normalizedPath: String, sensitive: Boolean = definedExternally): Promise<Boolean>
/**
     * Retrieve metadata about the given file/folder.
     * @param normalizedPath - path to file/folder, use {@link normalizePath} to normalize beforehand.
     * @public
     * @since 0.12.2
     */
fun stat(normalizedPath: String): Promise<Stat?>
/**
     * Retrieve a list of all files and folders inside the given folder, non-recursive.
     * @param normalizedPath - path to folder, use {@link normalizePath} to normalize beforehand.
     * @public
     */
fun list(normalizedPath: String): Promise<ListedFiles>
/**
     * @param normalizedPath - path to file, use {@link normalizePath} to normalize beforehand.
     * @public
     */
fun read(normalizedPath: String): Promise<String>
/**
     * @param normalizedPath - path to file, use {@link normalizePath} to normalize beforehand.
     * @public
     */
fun readBinary(normalizedPath: String): Promise<ArrayBuffer>
/**
     * Write to a plaintext file.
     * If the file exists its content will be overwritten, otherwise the file will be created.
     * @param normalizedPath - path to file, use {@link normalizePath} to normalize beforehand.
     * @param data - new file content
     * @param options - (Optional)
     * @public
     */
fun write(normalizedPath: String, data: String, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * Write to a binary file.
     * If the file exists its content will be overwritten, otherwise the file will be created.
     * @param normalizedPath - path to file, use {@link normalizePath} to normalize beforehand.
     * @param data - the new file content
     * @param options - (Optional)
     * @public
     */
fun writeBinary(normalizedPath: String, data: ArrayBuffer, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * Add text to the end of a plaintext file.
     * @param normalizedPath - path to file, use {@link normalizePath} to normalize beforehand.
     * @param data - the text to append.
     * @param options - (Optional)
     * @public
     */
fun append(normalizedPath: String, data: String, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * Atomically read, modify, and save the contents of a plaintext file.
     * @param normalizedPath - path to file/folder, use {@link normalizePath} to normalize beforehand.
     * @param fn - a callback function which returns the new content of the file synchronously.
     * @param options - write options.
     * @returns string - the text value of the file that was written.
     * @public
     */
fun process(normalizedPath: String, fn: (data: String) -> String, options: DataWriteOptions = definedExternally): Promise<String>
/**
     * Returns an URI for the browser engine to use, for example to embed an image.
     * @param normalizedPath - path to file/folder, use {@link normalizePath} to normalize beforehand.
     * @public
     */
fun getResourcePath(normalizedPath: String): String
/**
     * Create a directory.
     * @param normalizedPath - path to use for new folder, use {@link normalizePath} to normalize beforehand.
     * @public
     */
fun mkdir(normalizedPath: String): Promise<js.core.Void>
/**
     * Try moving to system trash.
     * @param normalizedPath - path to file/folder, use {@link normalizePath} to normalize beforehand.
     * @returns Returns true if succeeded. This can fail due to system trash being disabled.
     * @public
     */
fun trashSystem(normalizedPath: String): Promise<Boolean>
/**
     * Move to local trash.
     * Files will be moved into the `.trash` folder at the root of the vault.
     * @param normalizedPath - path to file/folder, use {@link normalizePath} to normalize beforehand.
     * @public
     */
fun trashLocal(normalizedPath: String): Promise<js.core.Void>
/**
     * Remove a directory.
     * @param normalizedPath - path to folder, use {@link normalizePath} to normalize beforehand.
     * @param recursive - If `true`, delete folders under this folder recursively, if `false` the folder needs to be empty.
     * @public
     */
fun rmdir(normalizedPath: String, recursive: Boolean): Promise<js.core.Void>
/**
     * Delete a file.
     * @param normalizedPath - path to file, use {@link normalizePath} to normalize beforehand.
     * @public
     */
fun remove(normalizedPath: String): Promise<js.core.Void>
/**
     * Rename a file or folder.
     * @param normalizedPath - current path to file/folder, use {@link normalizePath} to normalize beforehand.
     * @param normalizedNewPath - new path to file/folder, use {@link normalizePath} to normalize beforehand.
     * @public
     */
fun rename(normalizedPath: String, normalizedNewPath: String): Promise<js.core.Void>
/**
     * Create a copy of a file.
     * This will fail if there is already a file at `normalizedNewPath`.
     * @param normalizedPath - path to file, use {@link normalizePath} to normalize beforehand.
     * @param normalizedNewPath - path to file, use {@link normalizePath} to normalize beforehand.
     * @public
     */
fun copy(normalizedPath: String, normalizedNewPath: String): Promise<js.core.Void>
}

/**
 * @public
 */
external interface DataWriteOptions {
/**
     * Time of creation, represented as a unix timestamp, in milliseconds.
     * Omit this if you want to keep the default behaviour.
     * @public
     * */
var ctime: Double?
/**
     * Time of last modification, represented as a unix timestamp, in milliseconds.
     * Omit this if you want to keep the default behaviour.
     * @public
     */
var mtime: Double?
}

/**
 * {@link Value} wrapping a Date.
 * @public
 * @since 1.10.0
 */
external class DateValue : NotNullValue {
/**
     * @public
     * @since 1.10.0
     */
fun toString(): String
/**
     * @returns a new DateValue with any time portion in this DateValue removed.
     * @public
     * @since 1.10.0
     */
fun dateOnly(): DateValue
/**
     * @returns a new {@link RelativeDateValue} based on this DateValue.
     * @public
     * @since 1.10.0
     */
fun relative(): String
/**
     * @public
     * @since 1.10.0
     */
fun isTruthy(): Boolean
companion object {
/**
     * Create new DateValue from an input string.
     *
     * @example
     * parseFromString("2025-12-31")
     * parseFromString("2025-12-31T23:59")
     * parseFromString("2025-12-31T23:59:59")
     * parseFromString("2025-12-31T23:59:59Z-07")
     *
     * @param input - An ISO 8601 date or datetime string.
     * @public
     * @since 1.10.0
     */
fun parseFromString(input: String): DateValue?
}
}

/**
 * A standard debounce function.
 * Use this to have a time-delayed function only be called once in a given timeframe.
 *
 * @param cb - The function to call.
 * @param timeout - The timeout to wait, in milliseconds
 * @param resetTimer - Whether to reset the timeout when the debouncer is called again.
 * @returns a debounced function that takes the same parameter as the original function.
 * @example
 * ```ts
 * const debounced = debounce((text: string) => {
 *     console.log(text);
 * }, 1000, true);
 * debounced('Hello world'); // this will not be printed
 * await sleep(500);
 * debounced('World, hello'); // this will be printed to the console.
 * ```
 * @public
 */
external fun <T : js.array.ReadonlyArray<Any?>, V> debounce(cb: Function<V> /* (...args: [
    ...T
]) => V */, timeout: Double = definedExternally, resetTimer: Boolean = definedExternally): Debouncer<T, V>

/** @public */
external interface Debouncer<T : js.array.ReadonlyArray<Any?>, V> {
/** @public */
operator fun  invoke(vararg args: Any? /* js.array.VariadicTuple /* [
    ...T
] */ */): Unit /* this */
/**
     * Cancel any pending debounced function call.
     * @public
     */
fun cancel(): Unit /* this */
/**
     * If there is any pending function call, clear the timer and call the function immediately.
     * @public
     * @since 1.4.4
     */
fun run(): Any /* V | void */
}

/**
 * Manually trigger a tooltip that will appear over the provided element.
 *
 * To display a tooltip on hover, use {@link setTooltip} instead.
 * @public
 * @since 1.8.7
 */
external fun displayTooltip(newTargetEl: HTMLElement, content: String, options: TooltipOptions = definedExternally): Unit

/**
 * Manually trigger a tooltip that will appear over the provided element.
 *
 * To display a tooltip on hover, use {@link setTooltip} instead.
 * @public
 * @since 1.8.7
 */
external fun displayTooltip(newTargetEl: HTMLElement, content: DocumentFragment, options: TooltipOptions = definedExternally): Unit

/**
 * @public
 * @since 0.9.7
 */
external class DropdownComponent : ValueComponent<String> {
/**
     * @public
     */
constructor (containerEl: HTMLElement)
/**
     * @public
     * @since 0.9.7
     */
var selectEl: HTMLSelectElement
/**
     * @public
     * @since 1.2.3
     */
fun setDisabled(disabled: Boolean): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun addOption(value: String, display: String): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun addOptions(options: Record<String, String>): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun getValue(): String
/**
     * @public
     * @since 0.9.7
     */
fun setValue(value: String): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun onChange(callback: (value: String) -> Any?): Unit /* this */
}

/**
 * @public
 * @since 1.10.0
 */
external interface DropdownOption : BaseOption {
/**
     * @public
     * @since 1.10.0
     */
var type: String /* 'dropdown' */
/**
     * @public
     * @since 1.10.0
     */
var default: String?
/**
     * @public
     * @since 1.10.0
     */
var options: Record<String, String>
}

/**
 * {@link Value} wrapping a duration. Durations can be used to modify a {@link DateValue} or can
 * result from subtracting a DateValue from another.
 * @public
 * @since 1.10.0
 */
external class DurationValue : NotNullValue {
/**
     * @public
     * @since 1.10.0
     */
fun toString(): String
/**
     * @public
     * @since 1.10.0
     */
fun isTruthy(): Boolean
/**
     * Modifies the provided {@DateValue} by this duration.
     * @public
     * @since 1.10.0
     */
fun addToDate(value: DateValue, subtract: Boolean = definedExternally): DateValue
/**
     * Convert this duration into milliseconds.
     * @public
     * @since 1.10.0
     */
fun getMilliseconds(): Double
companion object {
/**
     * Create a new DurationValue using an ISO 8601 duration.
     * See {@link https://en.wikipedia.org/wiki/ISO_8601#Durations} for duration format details.
     * @public
     * @since 1.10.0
     */
fun parseFromString(input: String): DurationValue?
/**
     * Create a new DurationValue from milliseconds.
     * @public
     * @since 1.10.0
     */
fun fromMilliseconds(milliseconds: Double): DurationValue
}
}

/**
 * @public
 * @since 0.9.7
 */
external class EditableFileView : FileView {
/**
     * @public
     */
constructor (leaf: WorkspaceLeaf)
}

/**
 * A common interface that bridges the gap between CodeMirror 5 and CodeMirror 6.
 * @public
 * @since 0.11.11
 */
external class Editor {
/**
     * @public
     * @since 0.11.11
     */
fun getDoc(): Unit /* this */
/**
     * @public
     * @since 0.11.11
     */
fun refresh(): Unit
/**
     * @public
     * @since 0.11.11
     */
fun getValue(): String
/** @public
     * @since 0.11.11
     */
fun setValue(content: String): Unit
/**
     * Get the text at line (0-indexed)
     * @public
     * @since 0.11.11
     */
fun getLine(line: Double): String
/**
     * @public
     * @since 0.11.11
     */
fun setLine(n: Double, text: String): Unit
/**
     * Gets the number of lines in the document
     * @public
     * @since 0.11.11
     */
fun lineCount(): Double
/**
     * @public
     * @since 0.11.11
     */
fun lastLine(): Double
/**
     * @public
     * @since 0.11.11
     */
fun getSelection(): String
/**
     * @public
     * @since 0.11.11
     */
fun somethingSelected(): Boolean
/**
     * @public
     * @since 0.11.11
     */
fun getRange(from: EditorPosition, to: EditorPosition): String
/**
     * @public
     * @since 0.11.11
     */
fun replaceSelection(replacement: String, origin: String = definedExternally): Unit
/**
     * @public
     * @since 0.11.11
     */
fun replaceRange(replacement: String, from: EditorPosition, to: EditorPosition = definedExternally, origin: String = definedExternally): Unit
/**
     * @public
     * @since 0.11.11
     */
fun getCursor(side: EditorGetCursorSide = definedExternally): EditorPosition
/**
     * @public
     * @since 0.11.11
     */
fun listSelections(): js.array.ReadonlyArray<EditorSelection>
/**
     * @public
     * @since 0.11.11
     */
fun setCursor(pos: EditorPosition, ch: Double = definedExternally): Unit

/**
     * @public
     * @since 0.11.11
     */
fun setCursor(pos: Double, ch: Double = definedExternally): Unit
/**
     * @public
     * @since 0.11.11
     */
fun setSelection(anchor: EditorPosition, head: EditorPosition = definedExternally): Unit
/**
     * @public
     * @since 0.12.11
     */
fun setSelections(ranges: js.array.ReadonlyArray<EditorSelectionOrCaret>, main: Double = definedExternally): Unit
/**
     * @public
     * @since 0.11.11
     */
fun focus(): Unit
/**
     * @public
     * @since 0.11.11
     */
fun blur(): Unit
/**
     * @public
     * @since 0.11.11
     */
fun hasFocus(): Boolean
/**
     * @public
     * @since 0.11.11
     */
fun getScrollInfo(): EditorGetScrollInfoResult
/**
     * @public
     * @since 0.11.11
     */
fun scrollTo(x: Double? = definedExternally, y: Double? = definedExternally): Unit
/**
     * @public
     * @since 0.13.0
     */
fun scrollIntoView(range: EditorRange, center: Boolean = definedExternally): Unit
/**
     * @public
     * @since 0.11.11
     */
fun undo(): Unit
/**
     * @public
     * @since 0.11.11
     */
fun redo(): Unit
/**
     * @public
     * @since 0.12.2
     */
fun exec(command: EditorCommandName): Unit
/**
     * @public
     * @since 0.13.0
     */
fun transaction(tx: EditorTransaction, origin: String = definedExternally): Unit
/**
     * @public
     * @since 0.11.11
     */
fun wordAt(pos: EditorPosition): EditorRange?
/**
     * @public
     * @since 0.11.11
     */
fun posToOffset(pos: EditorPosition): Double
/**
     * @public
     * @since 0.11.11
     */
fun offsetToPos(offset: Double): EditorPosition
/**
     * @public
     * @since 0.13.26
     */
fun <T> processLines(read: (line: Double, lineText: String) -> T?, write: (line: Double, lineText: String, value: T?) -> Any /* EditorChange | void */, ignoreEmpty: Boolean = definedExternally): Unit
}

/**
 * @public
 * @since 0.12.11
 */
external interface EditorChange : EditorRangeOrCaret {
/** @public */
var text: String
}

/** @public */
sealed external interface EditorCommandName {
companion object {
@seskar.js.JsValue("goUp")
val goUp: EditorCommandName
@seskar.js.JsValue("goDown")
val goDown: EditorCommandName
@seskar.js.JsValue("goLeft")
val goLeft: EditorCommandName
@seskar.js.JsValue("goRight")
val goRight: EditorCommandName
@seskar.js.JsValue("goStart")
val goStart: EditorCommandName
@seskar.js.JsValue("goEnd")
val goEnd: EditorCommandName
@seskar.js.JsValue("goWordLeft")
val goWordLeft: EditorCommandName
@seskar.js.JsValue("goWordRight")
val goWordRight: EditorCommandName
@seskar.js.JsValue("indentMore")
val indentMore: EditorCommandName
@seskar.js.JsValue("indentLess")
val indentLess: EditorCommandName
@seskar.js.JsValue("newlineAndIndent")
val newlineAndIndent: EditorCommandName
@seskar.js.JsValue("swapLineUp")
val swapLineUp: EditorCommandName
@seskar.js.JsValue("swapLineDown")
val swapLineDown: EditorCommandName
@seskar.js.JsValue("deleteLine")
val deleteLine: EditorCommandName
@seskar.js.JsValue("toggleFold")
val toggleFold: EditorCommandName
@seskar.js.JsValue("foldAll")
val foldAll: EditorCommandName
@seskar.js.JsValue("unfoldAll")
val unfoldAll: EditorCommandName
}
}

/**
 * Use this StateField to get a reference to the EditorView
 * @public
 */
external val editorEditorField: StateField<EditorView>

/**
 * Use this StateField to get information about this Markdown editor, such as the associated file, or the Editor.
 * @public
 */
external val editorInfoField: StateField<MarkdownFileInfo>

/**
 * Use this StateField to check whether Live Preview is active
 * @public
 */
external val editorLivePreviewField: StateField<Boolean>

/**
 * @public
 * @since 0.12.11
 */
external interface EditorPosition {
/** @public */
var line: Double
/** @public */
var ch: Double
}

/**
 * @public
 * @since 0.12.11
 */
external interface EditorRange {
/** @public */
var from: EditorPosition
/** @public */
var to: EditorPosition
}

/**
 * @public
 * @since 0.12.11
 */
external interface EditorRangeOrCaret {
/** @public */
var from: EditorPosition
/** @public */
var to: EditorPosition?
}

/**
 * @public
 * @since 0.15.0
 * */
external interface EditorScrollInfo {
/** @public */
var left: Double
/** @public */
var top: Double
/** @public */
var width: Double
/** @public */
var height: Double
/** @public */
var clientWidth: Double
/** @public */
var clientHeight: Double
}

/**
 * @public
 * @since 0.12.11
 */
external interface EditorSelection {
/** @public */
var anchor: EditorPosition
/** @public */
var head: EditorPosition
}

/**
 * @public
 * @since 0.12.11
 */
external interface EditorSelectionOrCaret {
/** @public */
var anchor: EditorPosition
/** @public */
var head: EditorPosition?
}

/**
 * @public
 * @since 0.12.17
 */
external class EditorSuggest<T> : PopoverSuggest<T> {
/**
     * @public
     */
constructor (app: App)
/**
     * Current suggestion context, containing the result of `onTrigger`.
     * This will be null any time the EditorSuggest is not supposed to run.
     * @public
     * @since 0.12.17
     */
var context: EditorSuggestContext?
/**
     * Override this to use a different limit for suggestion items
     * @public
     * @since 0.12.17
     */
var limit: Double
/**
     * @public
     * @since 0.13.0
     */
fun setInstructions(instructions: js.array.ReadonlyArray<Instruction>): Unit
/**
     * Based on the editor line and cursor position, determine if this EditorSuggest should be triggered at this moment.
     * Typically, you would run a regular expression on the current line text before the cursor.
     * Return null to indicate that this editor suggest is not supposed to be triggered.
     *
     * Please be mindful of performance when implementing this function, as it will be triggered very often (on each keypress).
     * Keep it simple, and return null as early as possible if you determine that it is not the right time.
     * @public
     * @since 1.1.13
     */
fun onTrigger(cursor: EditorPosition, editor: Editor, file: TFile?): EditorSuggestTriggerInfo?
/**
     * Generate suggestion items based on this context. Can be async, but preferably sync.
     * When generating async suggestions, you should pass the context along.
     * @public
     * @since 0.12.17
     */
fun getSuggestions(context: EditorSuggestContext): Any /* T[] | Promise<T[]> */
}

/**
 * @public
 * @since 0.12.17
 */
external interface EditorSuggestContext : EditorSuggestTriggerInfo {
/** @public */
var editor: Editor
/** @public */
var file: TFile
}

/**
 * @public
 * @since 0.12.17
 */
external interface EditorSuggestTriggerInfo {
/**
     * The start position of the triggering text. This is used to position the popover.
     * @public
     */
var start: EditorPosition
/**
     * The end position of the triggering text. This is used to position the popover.
     * @public
     */
var end: EditorPosition
/**
     * They query string (usually the text between start and end) that will be used to generate the suggestion content.
     * @public
     */
var query: String
}

/** @public */
external interface EditorTransaction {
/** @public */
var replaceSelection: String?
/** @public */
var changes: js.array.ReadonlyArray<EditorChange>?
/**
     * Multiple selections, overrides `selection`.
     * @public
     */
var selections: js.array.ReadonlyArray<EditorRangeOrCaret>?
/** @public */
var selection: EditorRangeOrCaret?
}

/**
 * This is now deprecated - it is now mapped directly to `editorInfoField`, which return a MarkdownFileInfo, which may be a MarkdownView but not necessarily.
 * @public
 * @deprecated use {@link editorInfoField} instead.
 */
external val editorViewField: StateField<MarkdownFileInfo>

/**
 * @public
 * @since 0.9.7
 */
external interface EmbedCache : ReferenceCache {

}

/**
 * @public
 */
external interface EventRef {

}

/**
 * @public
 * @since 0.9.7
 */
external class Events {
/**
     * @public
     * @since 0.9.7
     */
fun on(name: String, callback: Function<Any?> /* (...data: unknown[]) => unknown */, ctx: Any? = definedExternally): EventRef
/**
     * @public
     * @since 0.9.7
     */
fun off(name: String, callback: Function<Any?> /* (...data: unknown[]) => unknown */): Unit
/**
     * @public
     * @since 0.9.7
     */
fun offref(ref: EventRef): Unit
/**
     * @public
     * @since 0.9.7
     */
fun trigger(name: String, vararg data: Any?): Unit
/**
     * @public
     * @since 0.9.7
     */
fun tryTrigger(evt: EventRef, args: js.array.ReadonlyArray<Any?>): Unit
}

/**
 * @public
 * @since 0.9.7
 */
external class ExtraButtonComponent : BaseComponent {
/**
     * @public
     */
constructor (containerEl: HTMLElement)
/**
     * @public
     * @since 0.9.7
     */
var extraSettingsEl: HTMLElement
/**
     * @public
     * @since 1.2.3
     */
fun setDisabled(disabled: Boolean): Unit /* this */
/**
     * @public
     * @since 1.1.0
     */
fun setTooltip(tooltip: String, options: TooltipOptions = definedExternally): Unit /* this */
/**
     * @param icon - ID of the icon, can use any icon loaded with {@link addIcon} or from the inbuilt library.
     * @see The Obsidian icon library includes the {@link https://lucide.dev/ Lucide icon library}, any icon name from their site will work here.
     * @public
     * @since 0.9.7
     */
fun setIcon(icon: IconName): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun onClick(callback: () -> Any?): Unit /* this */
}

/**
 * Manage the creation, deletion and renaming of files from the UI.
 * @public
 * @since 0.9.7
 */
external class FileManager {
/**
     * Gets the folder that new files should be saved to, given the user's preferences.
     * @param sourcePath - The path to the current open/focused file,
     * used when the user wants new files to be created 'in the same folder'.
     * Use an empty string if there is no active file.
     * @param newFilePath - The path to the file that will be newly created,
     * used to infer what settings to use based on the path's extension.
     * @public
     * @since 1.1.13
     */
fun getNewFileParent(sourcePath: String, newFilePath: String = definedExternally): TFolder
/**
     * Rename or move a file safely, and update all links to it depending on the user's preferences.
     * @param file - the file to rename
     * @param newPath - the new path for the file
     * @public
     * @since 0.11.0
     */
fun renameFile(file: TAbstractFile, newPath: String): Promise<js.core.Void>
/**
     * @public
     * @since 0.15.0
     */
fun promptForDeletion(file: TAbstractFile): Promise<js.core.Void>
/**
     * Remove a file or a folder from the vault according the user's preferred 'trash'
     * options (either moving the file to .trash/ or the OS trash bin).
     * @param file
     * @public
     * @since 1.6.6
     */
fun trashFile(file: TAbstractFile): Promise<js.core.Void>
/**
     * Generate a Markdown link based on the user's preferences.
     * @param file - the file to link to.
     * @param sourcePath - where the link is stored in, used to compute relative links.
     * @param subpath - A subpath, starting with `#`, used for linking to headings or blocks.
     * @param alias - The display text if it's to be different than the file name. Pass empty string to use file name.
     * @public
     * @since 0.12.0
     */
fun generateMarkdownLink(file: TFile, sourcePath: String, subpath: String = definedExternally, alias: String = definedExternally): String
/**
     * Atomically read, modify, and save the frontmatter of a note.
     * The frontmatter is passed in as a JS object, and should be mutated directly to achieve the desired result.
     *
     * Remember to handle errors thrown by this method.
     *
     * @param file - the file to be modified. Must be a Markdown file.
     * @param fn - a callback function which mutates the frontmatter object synchronously.
     * @param options - write options.
     * @throws YAMLParseError if the YAML parsing fails
     * @throws any errors that your callback function throws
     * @example
     * ```ts
     * app.fileManager.processFrontMatter(file, (frontmatter) => {
     *     frontmatter['key1'] = value;
     *     delete frontmatter['key2'];
     * });
     * ```
     * @public
     * @since 1.4.4
     */
fun processFrontMatter(file: TFile, fn: (frontmatter: Any?) -> Unit, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * Resolves a unique path for the attachment file being saved.
     * Ensures that the parent directory exists and dedupes the
     * filename if the destination filename already exists.
     *
     * @param filename Name of the attachment being saved
     * @param sourcePath The path to the note associated with this attachment, defaults to the workspace's active file.
     * @returns Full path for where the attachment should be saved, according to the user's settings
     * @public
     * @since 1.5.7
     */
fun getAvailablePathForAttachment(filename: String, sourcePath: String = definedExternally): Promise<String>
}

/**
 * @public
 */
external interface FileStats {
/**
     * Time of creation, represented as a unix timestamp, in milliseconds.
     * @public
     */
var ctime: Double
/**
     * Time of last modification, represented as a unix timestamp, in milliseconds.
     * @public
     */
var mtime: Double
/**
     * Size on disk, as bytes.
     * @public
     */
var size: Double
}

/**
 * Implementation of the vault adapter for desktop.
 * @public
 */
external class FileSystemAdapter : DataAdapter {
/**
     * @public
     */
fun getName(): String
/**
     * @public
     */
fun getBasePath(): String
/**
     * @public
     */
fun mkdir(normalizedPath: String): Promise<js.core.Void>
/**
     * @public
     */
fun trashSystem(normalizedPath: String): Promise<Boolean>
/**
     * @public
     */
fun trashLocal(normalizedPath: String): Promise<js.core.Void>
/**
     * @public
     */
fun rmdir(normalizedPath: String, recursive: Boolean): Promise<js.core.Void>
/**
     * @public
     */
fun read(normalizedPath: String): Promise<String>
/**
     * @public
     */
fun readBinary(normalizedPath: String): Promise<ArrayBuffer>
/**
     * @public
     */
fun write(normalizedPath: String, data: String, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * @public
     */
fun writeBinary(normalizedPath: String, data: ArrayBuffer, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * @public
     */
fun append(normalizedPath: String, data: String, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * @public
     */
fun process(normalizedPath: String, fn: (data: String) -> String, options: DataWriteOptions = definedExternally): Promise<String>
/**
     * @public
     */
fun getResourcePath(normalizedPath: String): String
/**
     * Returns the file:// path of this file
     * @public
     * @since 0.14.3
     */
fun getFilePath(normalizedPath: String): String
/**
     * @public
     */
fun remove(normalizedPath: String): Promise<js.core.Void>
/**
     * @public
     */
fun rename(normalizedPath: String, normalizedNewPath: String): Promise<js.core.Void>
/**
     * @public
     */
fun copy(normalizedPath: String, normalizedNewPath: String): Promise<js.core.Void>
/**
     * @public
     */
fun exists(normalizedPath: String, sensitive: Boolean = definedExternally): Promise<Boolean>
/**
     * @public
     * @since 0.12.2
     */
fun stat(normalizedPath: String): Promise<Stat?>
/**
     * @public
     */
fun list(normalizedPath: String): Promise<ListedFiles>
/**
     * @public
     */
fun getFullPath(normalizedPath: String): String
companion object {
/**
     * @public
     */
fun readLocalFile(path: String): Promise<ArrayBuffer>
/**
     * @public
     */
fun mkdir(path: String): Promise<js.core.Void>
}
}

/**
 * {@link Value} wrapping a file in Obsidian.
 * @public
 * @since 1.10.0
 */
external class FileValue : NotNullValue {
/**
     * @public
     * @since 1.10.0
     */
fun toString(): String
/**
     * @public
     * @since 1.10.0
     */
fun isTruthy(): Boolean
}

/**
 * @public
 */
external class FileView : ItemView {
constructor (leaf: WorkspaceLeaf)
/**
     * @public
     */
var allowNoFile: Boolean
/**
     * @public
     */
var file: TFile?
/**
     * File views can be navigated by default.
     * @inheritDoc
     * @public
     */
var navigation: Boolean
/**
     * @public
     */
fun getDisplayText(): String
/**
     * @public
     */
fun onload(): Unit
/**
     * @public
     */
fun getState(): Record<String, Any?>
/**
     * @public
     * @since 0.9.7
     */
fun setState(state: Any?, result: ViewStateResult): Promise<js.core.Void>
/**
     * @public
     */
fun onLoadFile(file: TFile): Promise<js.core.Void>
/**
     * @public
     */
fun onUnloadFile(file: TFile): Promise<js.core.Void>
/**
     * @public
     */
fun onRename(file: TFile): Promise<js.core.Void>
/**
     * @public
     * @since 0.9.7
     */
fun canAcceptExtension(extension: String): Boolean
}

/**
 * Flush the MathJax stylesheet.
 * @public
 */
external fun finishRenderMath(): Promise<js.core.Void>

/**
 * @public
 */
external interface FootnoteCache : CacheItem {
/**
     * @public
     */
var id: String
}

/**
 * @public
 */
external interface FootnoteRefCache : CacheItem {
/**
     * @public
     */
var id: String
}

/**
 * @public
 * @since 1.7.2
 */
external interface FootnoteSubpathResult : SubpathResult {
/**
     * @public
     */
var type: String /* 'footnote' */
/**
     * @public
     */
var footnote: FootnoteCache
}

/**
 * The context in which a formula is evaluated. In most cases, {@link BasesEntry} is the specific type to use.
 * @public
 * @since 1.10.0
 */
external interface FormulaContext {

}

/**
 * @public
 */
external interface FrontMatterCache {
/**
     * @public
     */
operator fun get(key: String): Any?

operator fun set(key: String, value: Any?)
}

/** @public */
external interface FrontMatterInfo {
/** @public Whether this file has a frontmatter block */
var exists: Boolean
/** @public String representation of the frontmatter */
var frontmatter: String
/** @public Start of the frontmatter contents (excluding the ---) */
var from: Double
/** @public End of the frontmatter contents (excluding the ---) */
var to: Double
/** @public Offset where the frontmatter block ends (including the ---) */
var contentStart: Double
}

/**
 * @public
 */
external interface FrontmatterLinkCache : Reference {
/**
     * @public
     */
var key: String
}

/**
 * @public
 * @since 0.9.20
 */
external interface FuzzyMatch<T> {
/**
     * @public
     * @since 0.9.20
     */
var item: T
/**
     * @public
     * @ince 0.9.20
     */
var match: SearchResult
}

/**
 * @public
 * @since 0.9.20
 */
external class FuzzySuggestModal<T> : SuggestModal<FuzzyMatch<T>> {
/**
     * @public
     */
constructor (app: App)
/**
     * @public
     * @since 0.9.20
     */
fun getSuggestions(query: String): js.array.ReadonlyArray<FuzzyMatch<T>>
/**
     * @public
     * @since 0.9.20
     */
fun renderSuggestion(item: FuzzyMatch<T>, el: HTMLElement): Unit
/**
     * @public
     * @since 0.9.20
     */
fun onChooseSuggestion(item: FuzzyMatch<T>, evt: MouseEvent): Unit

/**
     * @public
     * @since 0.9.20
     */
fun onChooseSuggestion(item: FuzzyMatch<T>, evt: KeyboardEvent): Unit
/**
     * @public
     * @since 0.9.20
     */
fun getItems(): js.array.ReadonlyArray<T>
/**
     * @public
     * @since 0.9.20
     */
fun getItemText(item: T): String
/**
     * @public
     * @since 0.9.20
     */
fun onChooseItem(item: T, evt: MouseEvent): Unit

/**
     * @public
     * @since 0.9.20
     */
fun onChooseItem(item: T, evt: KeyboardEvent): Unit
}

/**
 * Combines all tags from frontmatter and note content into a single array.
 * @public
 */
external fun getAllTags(cache: CachedMetadata): js.array.ReadonlyArray<String>?

/** @public */
external fun getBlobArrayBuffer(blob: Blob): Promise<ArrayBuffer>

/**
 * Given the contents of a file, get information about the frontmatter of the file, including
 * whether there is a frontmatter block, the offsets of where it starts and ends, and the frontmatter text.
 *
 * @public
 * @since 1.5.7
 */
external fun getFrontMatterInfo(content: String): FrontMatterInfo

/**
 * Create an SVG from an iconId. Returns null if no icon associated with the iconId.
 * @param iconId - the icon ID
 * @public
 */
external fun getIcon(iconId: String): SVGSVGElement

/**
 * Get the list of registered icons.
 * @public
 */
external fun getIconIds(): js.array.ReadonlyArray<IconName>

/**
 * Get the ISO code for the currently configured app language. Defaults to 'en'.
 * See {@link https://github.com/obsidianmd/obsidian-translations?tab=readme-ov-file#existing-languages} for list of options.
 * @public
 * @since 1.8.7
 */
external fun getLanguage(): String

/**
 * Converts the linktext to a linkpath.
 * @param linktext A wikilink without the leading [[ and trailing ]]
 * @returns the name of the file that is being linked to.
 * @public
 */
external fun getLinkpath(linktext: String): String

/**
 * Collapsible container for other ViewOptions.
 * @public
 * @since 1.10.0
 */
external interface GroupOption {
/**
     * @public
     * @since 1.10.0
     */
var type: String /* 'group' */
/**
     * @public
     * @since 1.10.0
     */
var displayName: String
/**
     * @public
     * @since 1.10.0
     */
var items: js.array.ReadonlyArray<Exclude<ViewOption, GroupOption>>
}

/**
 * @public
 */
external interface HeadingCache : CacheItem {
/**
     * @public
     */
var heading: String
/**
     * Number between 1 and 6.
     * @public
     */
var level: Double
}

/**
 * @public
 * @since 0.9.16
 */
external interface HeadingSubpathResult : SubpathResult {
/**
     * @public
     * @since 0.9.16
     */
var type: String /* 'heading' */
/**
     * @public
     * @since 0.9.16
     */
var current: HeadingCache
/**
     * @public
     * @since 0.9.16
     */
var next: HeadingCache
}

/**
 * Hex strings are 6-digit hash-prefixed rgb strings in lowercase form.
 * Example: #ffffff
 * @public
 */
typealias HexString = String

/** @public */
external fun hexToArrayBuffer(hex: String): ArrayBuffer

/**
 * @public
 */
external interface Hotkey {
/** @public */
var modifiers: js.array.ReadonlyArray<Modifier>
/** @public */
var key: String
}

/**
 * @public
 */
external interface HoverLinkSource {
/**
     * Text displayed in the 'Page preview' plugin settings.
     * It should match the plugin's display name.
     * @public
     */
var display: String
/**
     * Whether the `hover-link` event requires the 'Mod' key to be pressed to trigger.
     * @public
     */
var defaultMod: Boolean
}

/**
 * @public
 * @since 0.11.13
 */
external interface HoverParent {
/**
     * @public
     * @since 0.11.13
     */
var hoverPopover: HoverPopover?
}

/**
 * @public
 * @since 0.15.0
 */
external class HoverPopover : Component {
/**
     * @public
     */
constructor (parent: HoverParent, targetEl: HTMLElement?, waitTime: Double = definedExternally, staticPos: Point? = definedExternally)
/**
     * @public
     */
var hoverEl: HTMLElement
/**
     * @public
     */
var state: PopoverState
}

/**
 * @public
 * @since 0.16.0
 */
external interface HSL {
/**
     * Hue integer value between 0 and 360
     * @public
     * @since 0.16.0
     */
var h: Double
/**
     * Saturation integer value between 0 and 100
     * @public
     * @since 0.16.0
     */
var s: Double
/**
     * Lightness integer value between 0 and 100
     * @public
     * @since 0.16.0
     */
var l: Double
}

/**
 * Converts HTML to a Markdown string.
 * @public
 */
external fun htmlToMarkdown(html: String): String

/**
 * Converts HTML to a Markdown string.
 * @public
 */
external fun htmlToMarkdown(html: HTMLElement): String

/**
 * Converts HTML to a Markdown string.
 * @public
 */
external fun htmlToMarkdown(html: Document): String

/**
 * Converts HTML to a Markdown string.
 * @public
 */
external fun htmlToMarkdown(html: DocumentFragment): String

/**
 * {@link Value} wrapping raw HTML.
 * @public
 * @since 1.10.0
 */
external class HTMLValue : StringValue {
constructor (value: T)
}

/**
 * {@link Value} wrapping a renderable icon.
 * @public
 * @since 1.10.0
 */
external class IconValue : StringValue {
constructor (value: T)
}

/**
 * {@link Value} wrapping a path to an image resource in the vault.
 * @public
 * @since 1.10.0
 */
external class ImageValue : StringValue {
constructor (value: T)
}

/**
 * @public
 * @since 0.9.20
 */
external interface Instruction {
/**
     * @public
     * @since 0.9.20
     */
var command: String
/**
     * @public
     * @since 0.9.20
     */
var purpose: String
}

/**
 * @public
 */
external interface ISuggestOwner<T> {
/**
     * Render the suggestion item into DOM.
     * @public
     */
fun renderSuggestion(value: T, el: HTMLElement): Unit
/**
     * Called when the user makes a selection.
     * @public
     */
fun selectSuggestion(value: T, evt: MouseEvent): Unit

/**
     * Called when the user makes a selection.
     * @public
     */
fun selectSuggestion(value: T, evt: KeyboardEvent): Unit
}

/**
 * @public
 *@since 0.9.7
 */
external class ItemView : View {
/**
     * @public
     */
constructor (leaf: WorkspaceLeaf)
/** @public */
var contentEl: HTMLElement
/**
     * @public
     * @since 1.1.0
     */
fun addAction(icon: IconName, title: String, callback: (evt: MouseEvent) -> Any?): HTMLElement
}

/**
 * Iterate links and embeds.
 * If callback returns true, the iteration process will be interrupted.
 * @returns true if callback ever returns true, false otherwise.
 * @public
 * @deprecated
 */
external fun iterateCacheRefs(cache: CachedMetadata, cb: (ref: ReferenceCache) -> Any /* boolean | void */): Boolean

/**
 * If callback returns true, the iteration process will be interrupted.
 * @returns true if callback ever returns true, false otherwise.
 * @public
 */
external fun iterateRefs(refs: js.array.ReadonlyArray<Reference>, cb: (ref: Reference) -> Any /* boolean | void */): Boolean

/**
 * Manages keymap lifecycle for different {@link Scope}s.
 *
 * @public
 * @since 0.13.9
 */
external class Keymap {
/**
     * Push a scope onto the scope stack, setting it as the active scope to handle all key events.
     * @public
     * @since 0.13.9
     */
fun pushScope(scope: Scope): Unit
/**
     * Remove a scope from the scope stack.
     * If the given scope is active, the next scope in the stack will be made active.
     * @public
     * @since 0.13.9
     */
fun popScope(scope: Scope): Unit
companion object {
/**
     * Checks whether the modifier key is pressed during this event.
     * @public
     * @since 0.12.17
     */
fun isModifier(evt: MouseEvent, modifier: Modifier): Boolean

/**
     * Checks whether the modifier key is pressed during this event.
     * @public
     * @since 0.12.17
     */
fun isModifier(evt: TouchEvent, modifier: Modifier): Boolean

/**
     * Checks whether the modifier key is pressed during this event.
     * @public
     * @since 0.12.17
     */
fun isModifier(evt: KeyboardEvent, modifier: Modifier): Boolean
/**
     * Translates an event into the type of pane that should open.
     * Returns 'tab' if the modifier key Cmd/Ctrl is pressed OR if this is a middle-click MouseEvent.
     * Returns 'split' if Cmd/Ctrl+Alt is pressed.
     * Returns 'window' if Cmd/Ctrl+Alt+Shift is pressed.
     * @public
     * @since 0.16.0
     * */
fun isModEvent(evt: UserEvent = definedExternally): Any /* PaneType | boolean */
}
}

/**
 * @public
 */
external interface KeymapContext : KeymapInfo {
/**
     * Interpreted virtual key.
     * @public
     */
var vkey: String
}

/**
 * @public
 */
external interface KeymapEventHandler : KeymapInfo {
/** @public */
var scope: Scope
}

/**
 * Return `false` to automatically preventDefault
 * @public
 */
typealias KeymapEventListener = (evt: KeyboardEvent, ctx: KeymapContext) -> Any? /* false | any */

/**
 * @public
 * @since 0.10.4
 */
external interface KeymapInfo {
/**
     * @public
     * @since 0.10.4
     */
var modifiers: String?
/**
     * @public
     * @since 0.10.4
     */
var key: String?
}

/**
 * @public
 * @since 0.9.7
 */
external interface LinkCache : ReferenceCache {

}

/**
 * {@link Value} wrapping an internal wikilink.
 * @public
 * @since 1.10.0
 */
external class LinkValue : StringValue {
constructor (value: T)
companion object {
/**
     * Create a new LinkValue from wikilink syntax.
     * @example
     * parseFromString("[[Welcome|Example Link]]")
     *
     * @public
     * @since 1.10.0
     */
fun parseFromString(app: App, input: String, sourcePath: String): LinkValue?
}
}

/**
 * @public
 */
external interface ListedFiles {
/** @public */
var files: js.array.ReadonlyArray<String>
/** @public */
var folders: js.array.ReadonlyArray<String>
}

/**
 * @public
 */
external interface ListItemCache : CacheItem {
/**
     * The block ID of this list item, if defined.
     * @public
     */
var id: String?
/**
     * A single character indicating the checked status of a task.
     * The space character `' '` is interpreted as an incomplete task.
     * An other character is interpreted as completed task.
     * `undefined` if this item isn't a task.
     * @public
     */
var task: String?
/**
     * Line number of the parent list item (position.start.line).
     * If this item has no parent (e.g. it's a root level list),
     * then this value is the negative of the line number of the first list item (start of the list).
     *
     * Can be used to deduce which list items belongs to the same group (item1.parent === item2.parent).
     * Can be used to reconstruct hierarchy information (parentItem.position.start.line === childItem.parent).
     * @public
     */
var parent: Double
}

/**
 * {@link Value} wrapping an array of Values. Values do not all need to be of the same type.
 * @public
 * @since 1.10.0
 */
external class ListValue : NotNullValue {
/**
     * The array passed in will be modified!
     * @param value - Contents of the list.
     * @public
     * @since 1.10.0
     */
constructor (value: js.array.ReadonlyArray<(Any? /* unknown | Value */)>)
/**
     * @public
     * @since 1.10.0
     */
fun toString(): String
/**
     * @public
     * @since 1.10.0
     */
fun isTruthy(): Boolean
/**
     * @returns true if any elements in this list loosely equal the provided value.
     * @public
     * @since 1.10.0
     */
fun includes(value: Value): Boolean
/**
     * @returns the number of elements in this list.
     * @public
     * @since 1.10.0
     */
fun length(): Double
/**
     * @returns the value at the provided index, or {@link NullValue}.
     * @public
     * @since 1.10.0
     */
fun get(index: Double): Value
/**
     * @returns a new {@link ListValue} containing the elements from this ListValue and the provided ListValue.
     * @public
     * @since 1.10.0
     */
fun concat(other: ListValue): ListValue
companion object {
/**
     * @public
     * @since 1.10.0
     */
var type: String
}
}

/**
 * @public
 */
external val livePreviewState: ViewPlugin<LivePreviewStateType>

/**
 * The object stored in the view plugin {@link livePreviewState}
 * @public
 */
external interface LivePreviewStateType {
/**
     * True if the left mouse is currently held down in the editor
     * (for example, when drag-to-select text).
     * @public
     */
var mousedown: Boolean
}

/**
 * Load MathJax.
 * @see {@link https://www.mathjax.org/ Official MathJax documentation}
 * @public
 */
external fun loadMathJax(): Promise<js.core.Void>

/**
 * Load Mermaid and return a promise to the global mermaid object.
 * Can also use `mermaid` after this promise resolves to get the same reference.
 * @see {@link https://mermaid.js.org/ Official Mermaid documentation}
 * @public
 */
external fun loadMermaid(): Promise<Any?>

/**
 * Load PDF.js and return a promise to the global pdfjsLib object.
 * Can also use `window.pdfjsLib` after this promise resolves to get the same reference.
 * @see {@link https://mozilla.github.io/pdf.js/ Official PDF.js documentation}
 * @public
 */
external fun loadPdfJs(): Promise<Any?>

/**
 * Load Prism.js and return a promise to the global Prism object.
 * Can also use `Prism` after this promise resolves to get the same reference.
 * @see {@link https://prismjs.com/ Official Prism documentation}
 * @public
 */
external fun loadPrism(): Promise<Any?>

/**
 * Location within a Markdown document
 * @public
 */
external interface Loc {
/**
     * Line number. 0-based.
     * @public
     */
var line: Double
/**
     * Column number.
     * @public
     */
var col: Double
/**
     * Number of characters from the beginning of the file.
     * @public
     */
var offset: Double
}

/**
 * This is the editor for Obsidian Mobile as well as the WYSIWYG editor.
 * @public
 */
external class MarkdownEditView : MarkdownSubView, HoverParent, MarkdownFileInfo {
/**
     * @public
     */
constructor (view: MarkdownView)
/** @public */
var app: App
/** @public */
var hoverPopover: HoverPopover
/**
     * @public
     */
fun clear(): Unit
/**
     * @public
     */
fun get(): String
/**
     * @public
     */
fun set(data: String, clear: Boolean): Unit
/** @public */
val file: TFile
/**
     * @public
     */
fun getSelection(): String
/**
     * @public
     */
fun getScroll(): Double
/**
     * @public
     */
fun applyScroll(scroll: Double): Unit
}

/**
 * @public
 */
external interface MarkdownFileInfo : HoverParent {
/**
     * @public
     */
var app: App
/**
     * @public
     */
val file: TFile?
/**
     * @public
     */
var editor: Editor?
}

/**
 * A post processor receives an element which is a section of the preview.
 *
 * Post processors can mutate the DOM to render various things, such as mermaid graphs, latex equations, or custom controls.
 *
 * If your post processor requires lifecycle management, for example, to clear an interval, kill a subprocess, etc when this element is
 * removed from the app, look into {@link MarkdownPostProcessorContext.addChild}
 * @public
 * @since 0.10.12
 */
external interface MarkdownPostProcessor {
/**
     * The processor function itself.
     * @public
     */
operator fun  invoke(el: HTMLElement, ctx: MarkdownPostProcessorContext): Any /* Promise<any> | void */
/**
     * An optional integer sort order. Defaults to 0. Lower number runs before higher numbers.
     * @public
     */
var sortOrder: Double?
}

/**
 * @public
 */
external interface MarkdownPostProcessorContext {
/**
     * @public
     */
var docId: String
/**
     * The path to the associated file. Any links are assumed to be relative to the `sourcePath`.
     * @public
     */
var sourcePath: String
/** @public */
var frontmatter: Any?
/**
     * Adds a child component that will have its lifecycle managed by the renderer.
     *
     * Use this to add a dependent child to the renderer such that if the containerEl
     * of the child is ever removed, the component's unload will be called.
     * @public
     */
fun addChild(child: MarkdownRenderChild): Unit
/**
     * Gets the section information of this element at this point in time.
     * Only call this function right before you need this information to get the most up-to-date version.
     * This function may also return null in many circumstances; if you use it, you must be prepared to deal with nulls.
     * @public
     */
fun getSectionInfo(el: HTMLElement): MarkdownSectionInformation?
}

/** @public **/
external interface MarkdownPreviewEvents : Component {

}

/**
 * @public
 * @since 0.9.7
 */
external class MarkdownPreviewRenderer {

companion object {
/**
     * @public
     * @since 0.10.12
     */
fun registerPostProcessor(postProcessor: MarkdownPostProcessor, sortOrder: Double = definedExternally): Unit
/**
     * @public
     * @since 0.9.7
     */
fun unregisterPostProcessor(postProcessor: MarkdownPostProcessor): Unit
/**
     * @public
     * @since 0.12.11
     */
fun createCodeBlockPostProcessor(language: String, handler: (source: String, el: HTMLElement, ctx: MarkdownPostProcessorContext) -> Any /* Promise<any> | void */): (el: HTMLElement, ctx: MarkdownPostProcessorContext) -> Unit
}
}

/**
 * @public
 */
external class MarkdownPreviewView : MarkdownRenderer, MarkdownSubView, MarkdownPreviewEvents {
/**
     * @param containerEl - This HTMLElement will be used to test whether this component is still alive.
     * It should be a child of the Markdown preview sections, and when it's no longer attached
     * (for example, when it is replaced with a new version because the user edited the Markdown source code),
     * this component will be unloaded.
     * @public
     */
constructor (containerEl: HTMLElement)
/**
     * @public
     */
var containerEl: HTMLElement
/**
     * @public
     */
val file: TFile
/**
     * @public
     */
fun get(): String
/**
     * @public
     */
fun set(data: String, clear: Boolean): Unit
/**
     * @public
     */
fun clear(): Unit
/**
     * @public
     */
fun rerender(full: Boolean = definedExternally): Unit
/**
     * @public
     */
fun getScroll(): Double
/**
     * @public
     */
fun applyScroll(scroll: Double): Unit
}

/**
 * @public
 */
external class MarkdownRenderChild : Component {
constructor (containerEl: HTMLElement)
/** @public */
var containerEl: HTMLElement
}

/**
 * @public
 * @since 0.9.7
 */
external class MarkdownRenderer : MarkdownRenderChild, MarkdownPreviewEvents, HoverParent {
constructor (containerEl: HTMLElement)
/** @public */
var app: App
/** @public */
var hoverPopover: HoverPopover?
/** @public */
val file: TFile
companion object {
/**
     * Renders Markdown string to an HTML element.
     * @public
     * @deprecated - use {@link MarkdownRenderer.render}
     * @since 0.10.6
     */
fun renderMarkdown(markdown: String, el: HTMLElement, sourcePath: String, component: Component): Promise<js.core.Void>
/**
     * Renders Markdown string to an HTML element.
     * @param app - A reference to the app object
     * @param markdown - The Markdown source code
     * @param el - The element to append to
     * @param sourcePath - The normalized path of this Markdown file, used to resolve relative internal links
     * @param component - A parent component to manage the lifecycle of the rendered child components.
     * @public
     */
fun render(app: App, markdown: String, el: HTMLElement, sourcePath: String, component: Component): Promise<js.core.Void>
}
}

/** @public */
external interface MarkdownSectionInformation {
/** @public */
var text: String
/** @public */
var lineStart: Double
/** @public */
var lineEnd: Double
}

/**
 * @public
 */
external interface MarkdownSubView {
/**
     * @public
     */
fun getScroll(): Double
/**
     * @public
     */
fun applyScroll(scroll: Double): Unit
/**
     * @public
     */
fun get(): String
/**
     * @public
     */
fun set(data: String, clear: Boolean): Unit
}

/**
 * @public
 */
external class MarkdownView : TextFileView, MarkdownFileInfo {
/**
     * @public
     */
constructor (leaf: WorkspaceLeaf)
/** @public */
var editor: Editor
/** @public */
var previewMode: MarkdownPreviewView
/** @public */
var currentMode: MarkdownSubView
/** @public */
var hoverPopover: HoverPopover?
/**
     * @public
     */
fun getViewType(): String
/**
     * @public
     */
fun getMode(): MarkdownViewModeType
/**
     * @public
     */
fun getViewData(): String
/**
     * @public
     */
fun clear(): Unit
/**
     * @public
     */
fun setViewData(data: String, clear: Boolean): Unit
/**
     * @public
     */
fun showSearch(replace: Boolean = definedExternally): Unit
}

/**
 * @public
 */
sealed external interface MarkdownViewModeType {
companion object {
@seskar.js.JsValue("source")
val source: MarkdownViewModeType
@seskar.js.JsValue("preview")
val preview: MarkdownViewModeType
}
}

/**
 * @public
 */
external class Menu : Component, CloseableComponent {
/**
     * @public
     */
constructor ()
/**
     * @public
     */
fun setNoIcon(): Unit /* this */
/**
     * Force this menu to use native or DOM.
     * (Only works on the desktop app)
     * @public
     * @since 0.16.0
     */
fun setUseNativeMenu(useNativeMenu: Boolean): Unit /* this */
/**
     * Adds a menu item. Only works when menu is not shown yet.
     * @public
     */
fun addItem(cb: (item: MenuItem) -> Any?): Unit /* this */
/**
     * Adds a separator. Only works when menu is not shown yet.
     * @public
     */
fun addSeparator(): Unit /* this */
/**
     * @public
     * @since 0.12.6
     */
fun showAtMouseEvent(evt: MouseEvent): Unit /* this */
/**
     * @public
     * @since 1.1.0
     */
fun showAtPosition(position: MenuPositionDef, doc: Document = definedExternally): Unit /* this */
/**
     * @public
     */
fun hide(): Unit /* this */
/** @public */
fun close(): Unit
/**
     * @public
     */
fun onHide(callback: () -> Any?): Unit
companion object {
/**
     * @public
     * @since 1.6.0
     */
fun forEvent(evt: PointerEvent): Menu

/**
     * @public
     * @since 1.6.0
     */
fun forEvent(evt: MouseEvent): Menu
}
}

/**
 * @public
 */
external class MenuItem {
/**
     * @public
     */
fun setTitle(title: String): Unit /* this */

/**
     * @public
     */
fun setTitle(title: DocumentFragment): Unit /* this */
/**
     * @param icon - ID of the icon, can use any icon loaded with {@link addIcon} or from the built-in lucide library.
     * @see The Obsidian icon library includes the {@link https://lucide.dev/ Lucide icon library}, any icon name from their site will work here.
     * @public
     */
fun setIcon(icon: IconName?): Unit /* this */
/**
     * @public
     */
fun setChecked(checked: Boolean?): Unit /* this */
/**
     * @public
     */
fun setDisabled(disabled: Boolean): Unit /* this */
/**
     * @param state - If the warning state is enabled
     * If set to true the MenuItem's title and icon will become red. Or whatever colour is applied to the class 'is-warning' by a theme.
     * @public
     * @since 0.15.0
     */
fun setWarning(isWarning: Boolean): Unit /* this */
/**
     * @public
     * @since 0.15.0
     */
fun setIsLabel(isLabel: Boolean): Unit /* this */
/**
     * @public
     */
fun onClick(callback: (evt: Any? /* MouseEvent | KeyboardEvent */) -> Any?): Unit /* this */
/**
     * Sets the section this menu item should belong in.
     * To find the section IDs of an existing menu, inspect the DOM elements
     * to see their `data-section` attribute.
     * @public
     */
fun setSection(section: String): Unit /* this */
}

/**
 * @public
 * @since 1.1.0
 */
external interface MenuPositionDef {
/** @public */
var x: Double
/** @public */
var y: Double
/** @public */
var width: Double?
/** @public */
var overlap: Boolean?
/** @public */
var left: Boolean?
}

/**
 * @public
 * @since 0.15.3
 */
external class MenuSeparator {

}

/**
 *
 * Linktext is any internal link that is composed of a path and a subpath, such as 'My note#Heading'
 * Linkpath (or path) is the path part of a linktext
 * Subpath is the heading/block ID part of a linktext.
 *
 * @public
 */
external class MetadataCache : Events {
/**
     * Get the best match for a linkpath.
     * @public
     * @since 0.12.5
     */
fun getFirstLinkpathDest(linkpath: String, sourcePath: String): TFile?
/**
     * @public
     * @since 0.9.21
     */
fun getFileCache(file: TFile): CachedMetadata?
/**
     * @public
     * @since 0.14.5
     */
fun getCache(path: String): CachedMetadata?
/**
     * Generates a linktext for a file.
     *
     * If file name is unique, use the filename.
     * If not unique, use full path.
     * @public
     */
fun fileToLinktext(file: TFile, sourcePath: String, omitMdExtension: Boolean = definedExternally): String
/**
     * Contains all resolved links. This object maps each source file's path to an object of destination file paths with the link count.
     * Source and destination paths are all vault absolute paths that comes from `TFile.path` and can be used with `Vault.getAbstractFileByPath(path)`.
     * @public
     */
var resolvedLinks: Record<String, Record<String, Double>>
/**
     * Contains all unresolved links. This object maps each source file to an object of unknown destinations with count.
     * Source paths are all vault absolute paths, similar to `resolvedLinks`.
     * @public
     */
var unresolvedLinks: Record<String, Record<String, Double>>
/**
     * Called when a file has been indexed, and its (updated) cache is now available.
     *
     * Note: This is not called when a file is renamed for performance reasons.
     * You must hook the vault rename event for those.
     * @public
     */
fun on(name: String /* 'changed' */, callback: (file: TFile, data: String, cache: CachedMetadata) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Called when a file has been deleted. A best-effort previous version of the cached metadata is presented,
     * but it could be null in case the file was not successfully cached previously.
     * @public
     */
fun on(name: String /* 'deleted' */, callback: (file: TFile, prevCache: CachedMetadata?) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Called when a file has been resolved for `resolvedLinks` and `unresolvedLinks`.
     * This happens sometimes after a file has been indexed.
     * @public
     */
fun on(name: String /* 'resolve' */, callback: (file: TFile) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Called when all files has been resolved. This will be fired each time files get modified after the initial load.
     * @public
     */
fun on(name: String /* 'resolved' */, callback: () -> Any?, ctx: Any? = definedExternally): EventRef
}

/**
 * @public
 */
external class Modal : CloseableComponent {
/**
     * @public
     */
constructor (app: App)
/**
     * @public
     */
var app: App
/**
     * @public
     */
var scope: Scope
/**
     * @public
     */
var containerEl: HTMLElement
/**
     * @public
     */
var modalEl: HTMLElement
/**
     * @public
     */
var titleEl: HTMLElement
/**
     * @public
     */
var contentEl: HTMLElement
/**
     * @public
     * @since 0.9.16
     */
var shouldRestoreSelection: Boolean
/**
     * Show the modal on the active window. On mobile, the modal will animate on screen.
     * @public
     */
fun open(): Unit
/**
     * Hide the modal.
     * @public
     */
fun close(): Unit
/**
     * @public
     */
fun onOpen(): Any /* Promise<void> | void */
/**
     * @public
     */
fun onClose(): Unit
/**
     * @public
     */
fun setTitle(title: String): Unit /* this */
/**
     * @public
     */
fun setContent(content: String): Unit /* this */

/**
     * @public
     */
fun setContent(content: DocumentFragment): Unit /* this */
/**
     * @public
     * @since 1.10.0
     */
fun setCloseCallback(callback: () -> Any?): Unit /* this */
}

/**
 * Mod = Cmd on MacOS and Ctrl on other OS
 * Ctrl = Ctrl key for every OS
 * Meta = Cmd on MacOS and Win key on other OS
 * @public
 */
sealed external interface Modifier {
companion object {
@seskar.js.JsValue("Mod")
val Mod: Modifier
@seskar.js.JsValue("Ctrl")
val Ctrl: Modifier
@seskar.js.JsValue("Meta")
val Meta: Modifier
@seskar.js.JsValue("Shift")
val Shift: Modifier
@seskar.js.JsValue("Alt")
val Alt: Modifier
}
}

/** @public */
external val moment: Any /* typeof Moment */

/**
 * @public
 * @since 0.9.7
 */
external class MomentFormatComponent : TextComponent {
/**
     * @public
     */
constructor (containerEl: HTMLElement)
/**
     * @public
     * @since 0.9.7
     */
var sampleEl: HTMLElement
/**
     * Sets the default format when input is cleared. Also used for placeholder.
     * @public
     * @since 0.9.7
     */
fun setDefaultFormat(defaultFormat: String): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun setSampleEl(sampleEl: HTMLElement): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun setValue(value: String): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun onChanged(): Unit
/**
     * @public
     * @since 0.9.7
     */
fun updateSample(): Unit
}

/**
 * @public
 * @since 1.10.0
 */
external interface MultitextOption : BaseOption {
/**
     * @public
     * @since 1.10.0
     */
var type: String /* 'multitext' */
/**
     * @public
     * @since 1.10.0
     */
var default: js.array.ReadonlyArray<String>?
}

/**
 * @public
 */
external fun normalizePath(path: String): String

/**
 * Notification component. Use to present timely, high-value information.
 * @public
 * @since 0.9.7
 */
external class Notice {
/**
     * @param message - The message to be displayed, can either be a simple string or a {@link DocumentFragment}
     * @param duration - Time in milliseconds to show the notice for. If this is 0, the
     * Notice will stay visible until the user manually dismisses it.
     * @public
     */
constructor (message: String, duration: Double = definedExternally)

/**
     * @param message - The message to be displayed, can either be a simple string or a {@link DocumentFragment}
     * @param duration - Time in milliseconds to show the notice for. If this is 0, the
     * Notice will stay visible until the user manually dismisses it.
     * @public
     */
constructor (message: DocumentFragment, duration: Double = definedExternally)
/**
     * @public
     * @deprecated Use `messageEl` instead
     * @since 0.9.7
     */
var noticeEl: HTMLElement
/**
     * @public
     * @since 1.8.7
     */
var containerEl: HTMLElement
/**
     * @public
     * @since 1.8.7
     */
var messageEl: HTMLElement
/**
     * Change the message of this notice.
     * @public
     * @since 0.9.7
     */
fun setMessage(message: String): Unit /* this */

/**
     * Change the message of this notice.
     * @public
     * @since 0.9.7
     */
fun setMessage(message: DocumentFragment): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun hide(): Unit
}

/**
 * Base type for all non-null {@link Values}.
 * @public
 * @since 1.10.0
 */
external class NotNullValue : Value {

}

/**
 * {@link Value} which represents null.
 * NullValue is a singleton and `NullValue.value` should be used instead of calling the constructor.
 * @public
 * @since 1.10.0
 */
external class NullValue : Value {
/**
     * @public
     * @since 1.10.0
     */
fun toString(): String
/**
     * @public
     * @since 1.10.0
     */
fun isTruthy(): Boolean
companion object {
/**
     * @public
     * @since 1.10.0
     */
var value: NullValue
}
}

/**
 * {@link Value} wrapping a number.
 * @public
 * @since 1.10.0
 */
external class NumberValue : PrimitiveValue<Double> {
constructor (value: T)
companion object {
/**
     * @public
     * @since 1.10.0
     */
var type: String
}
}

/**
 * {@link Value} wrapping an object.
 * @public
 * @since 1.10.0
 */
external class ObjectValue : NotNullValue {
/**
     * @public
     * @since 1.10.0
     */
fun toString(): String
/**
     * @public
     * @since 1.10.0
     */
fun isTruthy(): Boolean
/**
     * @public
     * @since 1.10.0
     */
fun isEmpty(): Boolean
/**
     * @returns the {@link Value} associated with the provided key, or {@link NullValue}.
     * If the referenced property in the object is not a Value, it will be wrapped before returning.
     * @public
     * @since 1.10.0
     */
fun get(key: String): Value?
companion object {
/**
     * @public
     * @since 1.10.0
     */
var type: String
}
}

/**
 * @public
 */
external interface ObsidianProtocolData {
/** @public */
var action: String
/** @public */
operator fun get(key: String): (Any /* string | 'true' */)?

operator fun set(key: String, value: (Any /* string | 'true' */)?)
}

/**
 * @public
 */
typealias ObsidianProtocolHandler = (params: ObsidianProtocolData) -> Any?

/**
 * @public
 */
external interface OpenViewState {
/** @public */
var state: Record<String, Any?>?
/** @public */
var eState: Record<String, Any?>?
/** @public */
var active: Boolean?
/** @public */
var group: WorkspaceLeaf?
}

/**
 * @public
 */
sealed external interface PaneType {
companion object {
@seskar.js.JsValue("tab")
val tab: PaneType
@seskar.js.JsValue("split")
val split: PaneType
@seskar.js.JsValue("window")
val window: PaneType
}
}

/**
 * @public
 */
external fun parseFrontMatterAliases(frontmatter: Any?): js.array.ReadonlyArray<String>?

/**
 * @public
 */
external fun parseFrontMatterEntry(frontmatter: Any?, key: String): Any?

/**
 * @public
 */
external fun parseFrontMatterEntry(frontmatter: Any?, key: RegExp): Any?

/**
 * @public
 */
external fun parseFrontMatterStringArray(frontmatter: Any?, key: String): js.array.ReadonlyArray<String>?

/**
 * @public
 */
external fun parseFrontMatterStringArray(frontmatter: Any?, key: RegExp): js.array.ReadonlyArray<String>?

/**
 * @public
 */
external fun parseFrontMatterTags(frontmatter: Any?): js.array.ReadonlyArray<String>?

/**
 * Parses the linktext of a wikilink into its component parts.
 * @param linktext A wikilink without the leading [[ and trailing ]]
 * @returns filepath and subpath (subpath can refer either to a block id, or a heading)
 * @public
 */
external fun parseLinktext(linktext: String): ParseLinktextResult

/**
 * Split a Bases property ID into constituent parts.
 * @public
 * @since 1.10.0
 */
external fun parsePropertyId(propertyId: BasesPropertyId): BasesProperty

/** @public */
external fun parseYaml(yaml: String): Any?

/**
 * @public
 * @since 0.12.2
 */
external val Platform: Platform

/**
 * @public
 * @since 0.9.7
 */
open external class Plugin : Component {
/**
     * @public
     */
constructor (app: App, manifest: PluginManifest)
/**
     * @public
     * @since 0.9.7
     */
var app: App
/**
     * @public
     * @since 0.9.7
     */
var manifest: PluginManifest
/**
     * @public
     * @since 0.9.7
     */
open fun onload(): Any /* Promise<void> | void */
/**
     * Adds a ribbon icon to the left bar.
     * @param icon - The icon name to be used. See {@link addIcon}
     * @param title - The title to be displayed in the tooltip.
     * @param callback - The `click` callback.
     * @public
     * @since 0.9.7
     */
fun addRibbonIcon(icon: IconName, title: String, callback: (evt: MouseEvent) -> Any?): HTMLElement
/**
     * Adds a status bar item to the bottom of the app.
     * Not available on mobile.
     * @see {@link https://docs.obsidian.md/Plugins/User+interface/Status+bar}
     * @return HTMLElement - element to modify.
     * @public
     * @since 0.9.7
     */
fun addStatusBarItem(): HTMLElement
/**
     * Register a command globally.
     * Registered commands will be available from the {@link https://help.obsidian.md/Plugins/Command+palette Command palette}.
     * The command id and name will be automatically prefixed with this plugin's id and name.
     * @public
     * @since 0.9.7
     */
fun addCommand(command: Command): Command
/**
     * Manually remove a command from the list of global commands.
     * This should not be needed unless your plugin registers commands dynamically.
     * @public
     * @since 1.7.2
     */
fun removeCommand(commandId: String): Unit
/**
     * Register a settings tab, which allows users to change settings.
     * @see {@link https://docs.obsidian.md/Plugins/User+interface/Settings#Register+a+settings+tab}
     * @public
     * @since 0.9.7
     */
fun addSettingTab(settingTab: PluginSettingTab): Unit
/**
     * @public
     * @since 0.9.7
     */
fun registerView(type: String, viewCreator: ViewCreator): Unit
/**
     * Registers a view with the 'Page preview' core plugin as an emitter of the 'hover-link' event.
     * @public
     * @since 1.1.0
     */
fun registerHoverLinkSource(id: String, info: HoverLinkSource): Unit
/**
     * @public
     * @since 0.9.7
     */
fun registerExtensions(extensions: js.array.ReadonlyArray<String>, viewType: String): Unit
/**
     * Registers a post processor, to change how the document looks in reading mode.
     * @see {@link https://docs.obsidian.md/Plugins/Editor/Markdown+post+processing}
     * @public
     * @since 0.9.7
     */
fun registerMarkdownPostProcessor(postProcessor: MarkdownPostProcessor, sortOrder: Double = definedExternally): MarkdownPostProcessor
/**
     * Register a special post processor that handles fenced code given a language and a handler.
     * This special post processor takes care of removing the `<pre><code>` and create a `<div>` that
     * will be passed to the handler, and is expected to be filled with custom elements.
     * @see {@link https://docs.obsidian.md/Plugins/Editor/Markdown+post+processing#Post-process+Markdown+code+blocks}
     * @public
     * @since 0.9.7
     */
fun registerMarkdownCodeBlockProcessor(language: String, handler: (source: String, el: HTMLElement, ctx: MarkdownPostProcessorContext) -> Any /* Promise<any> | void */, sortOrder: Double = definedExternally): MarkdownPostProcessor
/**
     * Register a Base view handler that can be used to render data from property queries.
     *
     * @returns false if bases are not enabled in this vault.
     * @public
     * @since 1.10.0
     */
fun registerBasesView(viewId: String, registration: BasesViewRegistration): Boolean
/**
     * Registers a CodeMirror 6 extension.
     * To reconfigure cm6 extensions for a plugin on the fly, an array should be passed in, and modified dynamically.
     * Once this array is modified, calling {@link Workspace.updateOptions} will apply the changes.
     * @param extension - must be a CodeMirror 6 `Extension`, or an array of Extensions.
     * @public
     * @since 0.12.8
     */
fun registerEditorExtension(extension: Extension): Unit
/**
     * Register a handler for obsidian:// URLs.
     * @param action - the action string. For example, 'open' corresponds to `obsidian://open`.
     * @param handler - the callback to trigger. A key-value pair that is decoded from the query will be passed in.
     *                  For example, `obsidian://open?key=value` would generate `{'action': 'open', 'key': 'value'}`.
     * @public
     * @since 0.11.0
     */
fun registerObsidianProtocolHandler(action: String, handler: ObsidianProtocolHandler): Unit
/**
     * Register an EditorSuggest which can provide live suggestions while the user is typing.
     * @public
     * @since 0.12.7
     */
fun registerEditorSuggest(editorSuggest: EditorSuggest<Any?>): Unit
/**
     * Load settings data from disk.
     * Data is stored in `data.json` in the plugin folder.
     * @see {@link https://docs.obsidian.md/Plugins/User+interface/Settings}
     * @public
     * @since 0.9.7
     */
fun loadData(): Promise<Any?>
/**
     * Write settings data to disk.
     * Data is stored in `data.json` in the plugin folder.
     * @see {@link https://docs.obsidian.md/Plugins/User+interface/Settings}
     * @public
     * @since 0.9.7
     */
fun saveData(data: Any?): Promise<js.core.Void>
/**
     * Perform any initial setup code. The user has explicitly interacted with the plugin
     * so its safe to engage with the user. If your plugin registers a custom view,
     * you can open it here.
     * @public
     * @since 1.7.2
     */
fun onUserEnable(): Unit
/**
     * Called when the `data.json` file is modified on disk externally from Obsidian.
     * This usually means that a Sync service or external program has modified
     * the plugin settings.
     *
     * Implement this method to reload plugin settings when they have changed externally.
     *
     * @public
     * @since 1.5.7
     */
val onExternalSettingsChange: (() -> Any?)?
}

/**
 * Metadata about a Community plugin.
 * @see {@link https://docs.obsidian.md/Reference/Manifest}
 * @public
 */
external interface PluginManifest {
/**
     * Vault path to the plugin folder in the config directory.
     * @public
     */
var dir: String?
/**
     * The plugin ID.
     * @public
     */
var id: String
/**
     * The display name.
     * @public
     */
var name: String
/**
     * The author's name.
     * @public
     */
var author: String
/**
     * The current version, using {@link https://semver.org/ Semantic Versioning}.
     * @public
     */
var version: String
/**
     * The minimum required Obsidian version to run this plugin.
     * @public
     */
var minAppVersion: String
/**
     * A description of the plugin.
     * @public
     */
var description: String
/**
     * A URL to the author's website.
     * @public
     */
var authorUrl: String?
/**
     * Whether the plugin can be used only on desktop.
     * @public
     */
var isDesktopOnly: Boolean?
}

/**
 * Provides a unified interface for users to configure the plugin.
 * @see {@link https://docs.obsidian.md/Plugins/User+interface/Settings#Register+a+settings+tab}
 * @public
 * @since 0.9.7
 */
external class PluginSettingTab : SettingTab {
/**
     * @public
     */
constructor (app: App, plugin: Plugin)
}

/**
 * @public
 */
external interface Point {
/**
     * @public
     */
var x: Double
/**
     * @public
     */
var y: Double
}

/**
 * @public
 */
sealed external interface PopoverState {
companion object {

}
}

/**
 * Base class for adding a type-ahead popover.
 * @public
 */
external class PopoverSuggest<T> : ISuggestOwner<T>, CloseableComponent {
/** @public */
constructor (app: App, scope: Scope = definedExternally)
/** @public */
var app: App
/** @public */
var scope: Scope
/** @public */
fun open(): Unit
/** @public */
fun close(): Unit
/**
     * @inheritDoc
     * @public
     */
fun renderSuggestion(value: T, el: HTMLElement): Unit
/**
     * @inheritDoc
     * @public
     */
fun selectSuggestion(value: T, evt: MouseEvent): Unit

/**
     * @inheritDoc
     * @public
     */
fun selectSuggestion(value: T, evt: KeyboardEvent): Unit
}

/**
 * Describes a text range in a Markdown document.
 * @public
 */
external interface Pos {
/**
     * Starting location.
     * @public
     */
var start: Loc
/**
     * End location.
     * @public
     */
var end: Loc
}

/**
 * Construct a fuzzy search callback that runs on a target string.
 * Performance may be an issue if you are running the search for more than a few thousand times.
 * If performance is a problem, consider using `prepareSimpleSearch` instead.
 * @param query - the fuzzy query.
 * @return fn - the callback function to apply the search on.
 * @public
 */
external fun prepareFuzzySearch(query: String): (text: String) -> SearchResult?

/**
 * Construct a simple search callback that runs on a target string.
 * @param query - the space-separated words
 * @return fn - the callback function to apply the search on
 * @public
 */
external fun prepareSimpleSearch(query: String): (text: String) -> SearchResult?

/**
 * Base type for {@link Values} which wrap a single primitive.
 * @public
 * @since 1.10.0
 */
external class PrimitiveValue<T> : NotNullValue {
constructor (value: T)
/**
     * @public
     * @since 1.10.0
     */
fun toString(): String
/**
     * @public
     * @since 1.10.0
     */
fun isTruthy(): Boolean
}

/**
 * @public
 * @since 1.4.4
 */
external class ProgressBarComponent : ValueComponent<Double> {
/**
     * @public
     */
constructor (containerEl: HTMLElement)
/**
     * @public
     */
fun getValue(): Double
/**
     * @param value - The progress amount, a value between 0-100.
     * @public
     */
fun setValue(value: Double): Unit /* this */
}

/**
 * A dropdown menu allowing selection of a property.
 * @public
 * @since 1.10.0
 */
external interface PropertyOption : BaseOption {
/**
     * @public
     * @since 1.10.0
     */
var type: String /* 'property' */
/**
     * @public
     * @since 1.10.0
     */
var default: String?
/**
     * @public
     * @since 1.10.0
     */
var placeholder: String?
/**
     * If provided, only properties which pass the filter will be included for selection in the property dropdown.
     *
     * @public
     * @since 1.10.0
     */
var filter: ((prop: BasesPropertyId) -> Boolean)?
}

/**
 * Responsible for executing the Bases query and evaluating filters and formulas.
 * Notifies views of updated results.
 * @public
 * @since 1.10.0
 */
external class QueryController : Component {

}

/**
 * Base interface for items that point to a different location.
 * @public
 */
external interface Reference {
/**
     * Link destination.
     * @public
     */
var link: String
/**
     * Contains the text as it's written in the document. Not available on Publish.
     * @public
     */
var original: String
/**
     * Available if title is different from link text, in the case of `[[page name|display name]]` this will return `display name`
     * @public
     */
var displayText: String?
}

/**
 * @public
 */
external interface ReferenceCache : Reference, CacheItem {

}

/**
 * @public
 * @since 1.8.7
 */
external interface ReferenceLinkCache : CacheItem {
/**
     * @public
     */
var id: String
/**
     * @public
     */
var link: String
}

/**
 * {@link Value} wrapping a RegExp pattern.
 * @public
 * @since 1.10.0
 */
external class RegExpValue : NotNullValue {
/**
     * @public
     * @since 1.10.0
     */
fun toString(): String
/**
     * @public
     * @since 1.10.0
     */
fun isTruthy(): Boolean
}

/**
 * {@link Value} wrapping a Date.
 * RelativeDateValue behaves the same as a {@link DateValue} however it renders as a time relative to now.
 * @public
 * @since 1.10.0
 */
external class RelativeDateValue : DateValue {

}

/**
 * Remove a custom icon from the library.
 * @param iconId - the icon ID
 * @public
 */
external fun removeIcon(iconId: String): Unit

/**
 * Utility functions for rendering Values within the app.
 * @public
 * @since 1.10.0
 */
external class RenderContext : HoverParent {
/**
     * @public
     * @since 1.10.0
     */
var hoverPopover: HoverPopover?
}

/**
 * @public
 */
external fun renderMatches(el: HTMLElement, text: String, matches: SearchMatches?, offset: Double = definedExternally): Unit

/**
 * @public
 */
external fun renderMatches(el: DocumentFragment, text: String, matches: SearchMatches?, offset: Double = definedExternally): Unit

/**
 * Render some LaTeX math using the MathJax engine. Returns an HTMLElement.
 * Requires calling `finishRenderMath` when rendering is all done to flush the MathJax stylesheet.
 * @public
 */
external fun renderMath(source: String, display: Boolean): HTMLElement

/**
 * @public
 */
external fun renderResults(el: HTMLElement, text: String, result: SearchResult, offset: Double = definedExternally): Unit

/**
 * Similar to `fetch()`, request a URL using HTTP/HTTPS, without any CORS restrictions.
 * Returns the text value of the response.
 * @public
 * @since 0.12.11
 */
external fun request(request: RequestUrlParam): Promise<String>

/**
 * Similar to `fetch()`, request a URL using HTTP/HTTPS, without any CORS restrictions.
 * Returns the text value of the response.
 * @public
 * @since 0.12.11
 */
external fun request(request: String): Promise<String>

/**
 * Similar to `fetch()`, request a URL using HTTP/HTTPS, without any CORS restrictions.
 * @public
 */
external fun requestUrl(request: RequestUrlParam): RequestUrlResponsePromise

/**
 * Similar to `fetch()`, request a URL using HTTP/HTTPS, without any CORS restrictions.
 * @public
 */
external fun requestUrl(request: String): RequestUrlResponsePromise

/** @public */
external interface RequestUrlParam {
/** @public */
var url: String
/** @public */
var method: String?
/** @public */
var contentType: String?
/** @public */
var body: (Any /* string | ArrayBuffer */)?
/** @public */
var headers: Record<String, String>?
/**
     * Whether to throw an error when the status code is 400+
     * Defaults to true
     * @public
     */
var `throw`: Boolean?
}

/** @public */
external interface RequestUrlResponse {
/** @public */
var status: Double
/** @public */
var headers: Record<String, String>
/** @public */
var arrayBuffer: ArrayBuffer
/** @public */
var json: Any?
/** @public */
var text: String
}

/** @public */
external interface RequestUrlResponsePromise : Promise<RequestUrlResponse> {
/** @public */
var arrayBuffer: Promise<ArrayBuffer>
/** @public */
var json: Promise<Any?>
/** @public */
var text: Promise<String>
}

/**
 * Returns true if the API version is equal or higher than the requested version.
 * Use this to limit functionality that require specific API versions to avoid
 * crashing on older Obsidian builds.
 * @public
 */
external fun requireApiVersion(version: String): Boolean

/**
 * Resolve the given subpath to a reference in the MetadataCache.
 * @public
 */
external fun resolveSubpath(cache: CachedMetadata, subpath: String): Any? /* HeadingSubpathResult | BlockSubpathResult | FootnoteSubpathResult | null */

/**
 * @public
 * @since 0.16.0
 */
external interface RGB {
/**
     * Red integer value between 0 and 255
     * @public
     */
var r: Double
/**
     * Green integer value between 0 and 255
     * @public
     */
var g: Double
/**
     * Blue integer value between 0 and 255
     * @public
     */
var b: Double
}

/** @public */
external fun sanitizeHTMLToDom(html: String): DocumentFragment

/**
 * A scope receives keyboard events and binds callbacks to given hotkeys.
 * Only one scope is active at a time, but scopes may define parent scopes (in the constructor) and inherit their hotkeys.
 * @public
 */
external class Scope {
/**
     * @public
     */
constructor (parent: Scope = definedExternally)
/**
     * Add a keymap event handler to this scope.
     * @param modifiers - `Mod`, `Ctrl`, `Meta`, `Shift`, or `Alt`. `Mod` translates to `Meta` on macOS and `Ctrl` otherwise. Pass `null` to capture all events matching the `key`, regardless of modifiers.
     * @param key - Keycode from https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key%5FValues
     * @param func - the callback that will be called when a user triggers the keybind.
     * @public
     */
fun register(modifiers: js.array.ReadonlyArray<Modifier>?, key: String?, func: KeymapEventListener): KeymapEventHandler
/**
     * Remove an existing keymap event handler.
     * @public
     */
fun unregister(handler: KeymapEventHandler): Unit
}

/**
 * @public
 * @since 0.9.21
 */
external class SearchComponent : AbstractTextComponent<HTMLInputElement> {
/**
     * @public
     */
constructor (containerEl: HTMLElement)
/**
     * @public
     * @since 0.9.21
     */
var clearButtonEl: HTMLElement
/**
     * @public
     */
fun onChanged(): Unit
}

/**
 * @public
 */
typealias SearchMatches = js.array.ReadonlyArray<SearchMatchPart>

/**
 * Text position offsets within text file. Represents
 * a text range [from offset, to offset].
 *
 * @public
 */
typealias SearchMatchPart = js.array.Tuple2<Double, Double>

/**
 * @public
 * @since 0.9.21
 */
external interface SearchResult {
/** @public */
var score: Double
/** @public */
var matches: SearchMatches
}

/**
 * @public
 * @since 0.9.21
 */
external interface SearchResultContainer {
/** @public */
var match: SearchResult
}

/**
 * @public
 */
external interface SectionCache : CacheItem {
/**
     * The block ID of this section, if defined.
     * @public
     */
var id: String?
/**
     * The type string generated by the parser.
     * Typing is non-exhaustive, more types can be available than are documented here.
     * @public
     */
var type: Any /* 'blockquote' | 'callout' | 'code' | 'element' | 'footnoteDefinition' | 'heading' | 'html' | 'list' | 'paragraph' | 'table' | 'text' | 'thematicBreak' | 'yaml' | string */
}

/**
 * Insert an SVG into the element from an iconId. Does nothing if no icon associated with the iconId.
 * @param parent - the HTML element to insert the icon
 * @param iconId - the icon ID
 * @see The Obsidian icon library includes the {@link https://lucide.dev/ Lucide icon library}, any icon name from their site will work here.
 * @public
 */
external fun setIcon(parent: HTMLElement, iconId: IconName): Unit

/**
 * @public
 * @since 0.9.7
 */
external class Setting {
/**
     * @public
     */
constructor (containerEl: HTMLElement)
/** @public
     * @since 0.9.7
     */
var settingEl: HTMLElement
/**
     * @public
     * @since 0.9.7
     */
var infoEl: HTMLElement
/**
     * @public
     * @since 0.9.7
     */
var nameEl: HTMLElement
/**
     * @public
     * @since 0.9.7
     */
var descEl: HTMLElement
/**
     * @public
     * @since 0.9.7
     */
var controlEl: HTMLElement
/**
     * @public
     * @since 0.9.7
     * */
var components: js.array.ReadonlyArray<BaseComponent>
/**
     * @public
     * @since 0.12.16
     */
fun setName(name: String): Unit /* this */

/**
     * @public
     * @since 0.12.16
     */
fun setName(name: DocumentFragment): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun setDesc(desc: String): Unit /* this */

/**
     * @public
     * @since 0.9.7
     */
fun setDesc(desc: DocumentFragment): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun setClass(cls: String): Unit /* this */
/**
     * @public
     * @since 1.1.0
     */
fun setTooltip(tooltip: String, options: TooltipOptions = definedExternally): Unit /* this */
/**
     * @public
     * @since 0.9.16
     */
fun setHeading(): Unit /* this */
/**
     * @public
     * @since 1.2.3
     */
fun setDisabled(disabled: Boolean): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun addButton(cb: (component: ButtonComponent) -> Any?): Unit /* this */
/**
     * @public
     * @since 0.9.16
     */
fun addExtraButton(cb: (component: ExtraButtonComponent) -> Any?): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun addToggle(cb: (component: ToggleComponent) -> Any?): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun addText(cb: (component: TextComponent) -> Any?): Unit /* this */
/**
     * @public
     * @since 0.9.21
     */
fun addSearch(cb: (component: SearchComponent) -> Any?): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun addTextArea(cb: (component: TextAreaComponent) -> Any?): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun addMomentFormat(cb: (component: MomentFormatComponent) -> Any?): Unit /* this */
/**
     * @public
     * @ince 0.9.7
     */
fun addDropdown(cb: (component: DropdownComponent) -> Any?): Unit /* this */
/**
     * @public
     * @ince 0.16.0
     */
fun addColorPicker(cb: (component: ColorComponent) -> Any?): Unit /* this */
/**
     * @public
     * @ince 1.4.4
     */
fun addProgressBar(cb: (component: ProgressBarComponent) -> Any?): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun addSlider(cb: (component: SliderComponent) -> Any?): Unit /* this */
/**
     * Facilitates chaining
     * @public
     * @since 0.9.20
     */
fun then(cb: (setting: Unit /* this */) -> Any?): Unit /* this */
/**
     * @public
     * @since 0.13.8
     */
fun clear(): Unit /* this */
}

/**
 * @public
 * @see {@link https://docs.obsidian.md/Plugins/User+interface/Settings#Register+a+settings+tab}
 * @since 0.9.7
 */
external class SettingTab {
/**
     * Reference to the app instance.
     * @public
     */
var app: App
/**
     * Outermost HTML element on the setting tab.
     * @public
     */
var containerEl: HTMLElement
/**
     * Called when the settings tab should be rendered.
     * @see {@link https://docs.obsidian.md/Plugins/User+interface/Settings#Register+a+settings+tab}
     * @public
     */
fun display(): Unit
/**
     * Hides the contents of the setting tab.
     * Any registered components should be unloaded when the view is hidden.
     * Override this if you need to perform additional cleanup.
     * @public
     */
fun hide(): Unit
}

/**
 * @param el - The element to show the tooltip on
 * @param tooltip - The tooltip text to show
 * @param options
 * @public
 * @since 1.4.4
 */
external fun setTooltip(el: HTMLElement, tooltip: String, options: TooltipOptions = definedExternally): Unit

/**
 * @public
 */
sealed external interface Side {
companion object {
@seskar.js.JsValue("left")
val left: Side
@seskar.js.JsValue("right")
val right: Side
}
}

/**
 * @public
 * @since 0.9.7
 */
external class SliderComponent : ValueComponent<Double> {
/**
     * @public
     */
constructor (containerEl: HTMLElement)
/**
     * @public
     */
var sliderEl: HTMLInputElement
/**
     * @public
     * @since 1.2.3
     */
fun setDisabled(disabled: Boolean): Unit /* this */
/**
     * @param instant whether or not the value should get updated while the slider is dragging
     * @public
     * @since 1.6.6
     */
fun setInstant(instant: Boolean): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun setLimits(min: Double?, max: Double?, step: Double): Unit /* this */

/**
     * @public
     * @since 0.9.7
     */
fun setLimits(min: Double?, max: Double?, step: String /* 'any' */): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun getValue(): Double
/**
     * @public
     * @since 0.9.7
     */
fun setValue(value: Double): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun getValuePretty(): String
/**
     * @public
     * @since 0.9.7
     */
fun setDynamicTooltip(): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun showTooltip(): Unit
/**
     * @public
     * @since 0.9.7
     */
fun onChange(callback: (value: Double) -> Any?): Unit /* this */
}

/**
 * @public
 * @since 1.10.0
 */
external interface SliderOption : BaseOption {
/**
     * @public
     * @since 1.10.0
     */
var type: String /* 'slider' */
/**
     * @public
     * @since 1.10.0
     */
var default: Double?
/**
     * @public
     * @since 1.10.0
     */
var min: Double?
/**
     * @public
     * @since 1.10.0
     */
var max: Double?
/**
     * @public
     * @since 1.10.0
     */
var step: Double?
/**
     * @public
     * @since 1.10.0
     */
var instant: Boolean?
}

/**
 * @public
 */
external fun sortSearchResults(results: js.array.ReadonlyArray<SearchResultContainer>): Unit

/**
 * @public
 */
sealed external interface SplitDirection {
companion object {
@seskar.js.JsValue("vertical")
val vertical: SplitDirection
@seskar.js.JsValue("horizontal")
val horizontal: SplitDirection
}
}

/** @public */
external interface Stat {
/** @public */
var type: StatType
/**
     * Time of creation, represented as a unix timestamp.
     * @public
     * */
var ctime: Double
/**
     * Time of last modification, represented as a unix timestamp.
     * @public
     */
var mtime: Double
/**
     * Size on disk, as bytes.
     * @public
     */
var size: Double
}

/** @public */
external fun stringifyYaml(obj: Any?): String

/**
 * {@link Value} wrapping a string.
 * @public
 * @since 1.10.0
 */
external class StringValue : PrimitiveValue<String> {
constructor (value: T)
companion object {
/**
     * @public
     * @since 1.10.0
     */
var type: String
}
}

/**
 * Normalizes headings for link matching by stripping out special characters and shrinking consecutive spaces.
 * @public
 */
external fun stripHeading(heading: String): String

/**
 * Prepares headings for linking by stripping out some bad combinations of special characters that could break links.
 * @public
 */
external fun stripHeadingForLink(heading: String): String

/**
 * @public
 */
external interface SubpathResult {
/**
     * @public
     */
var start: Loc
/**
     * @public
     */
var end: Loc?
}

/**
 * @public
 * @ince 0.9.20
 */
external class SuggestModal<T> : Modal, ISuggestOwner<T> {
constructor (app: App)
/**
     * @public
     * @ince 0.9.20
     */
var limit: Double
/**
     * @public
     * @since 0.9.20
     */
var emptyStateText: String
/**
     * @public
     * @0.9.20
     */
var inputEl: HTMLInputElement
/**
     * @public
     * @since 0.9.20
     */
var resultContainerEl: HTMLElement
/**
     * @public
     * @since 0.9.20
     */
fun setPlaceholder(placeholder: String): Unit
/**
     * @public
     * @since 0.9.20
     */
fun setInstructions(instructions: js.array.ReadonlyArray<Instruction>): Unit
/**
     * @public
     * @since 0.9.20
     */
fun onNoSuggestion(): Unit
/**
     * @public
     * @since 0.9.20
     */
fun selectSuggestion(value: T, evt: MouseEvent): Unit

/**
     * @public
     * @since 0.9.20
     */
fun selectSuggestion(value: T, evt: KeyboardEvent): Unit
/**
     * @public
     * @since 1.7.2
     */
fun selectActiveSuggestion(evt: MouseEvent): Unit

/**
     * @public
     * @since 1.7.2
     */
fun selectActiveSuggestion(evt: KeyboardEvent): Unit
/**
     * @public
     * @since 1.5.7
     */
fun getSuggestions(query: String): Any /* T[] | Promise<T[]> */
/**
     * @public
     * @since 1.5.7
     */
fun renderSuggestion(value: T, el: HTMLElement): Unit
/**
     * @public
     * @since 1.5.7
     */
fun onChooseSuggestion(item: T, evt: MouseEvent): Unit

/**
     * @public
     * @since 1.5.7
     */
fun onChooseSuggestion(item: T, evt: KeyboardEvent): Unit
}

/**
 * This can be either a `TFile` or a `TFolder`.
 * @public
 * @since 0.9.7
 */
external class TAbstractFile {
/**
     * @public
     * @since 0.9.7
     */
var vault: Vault
/**
     * @public
     * @since 0.9.7
     */
var path: String
/**
     * @public
     * @since 0.9.7
     */
var name: String
/**
     * @public
     * @since 0.9.7
     */
var parent: TFolder?
}

/**
 * @public
 * @since 0.9.7
 */
external interface TagCache : CacheItem {
/**
     * @public
     */
var tag: String
}

/**
 * {@link Value} wrapping an Obsidian tag.
 * @public
 * @since 1.10.0
 */
external class TagValue : StringValue {
/**
     * @public
     * @since 1.10.0
     */
constructor (value: String)
}

/**
 * @public
 * @since 0.10.2
 */
external class Tasks {
/**
     * @public
     * @since 0.10.2
     */
fun add(callback: () -> Promise<Any?>): Unit
/**
     * @public
     * @since 0.10.2
     */
fun addPromise(promise: Promise<Any?>): Unit
/**
     * @public
     * @since 0.10.2
     */
fun isEmpty(): Boolean
/**
     * @public
     * @since 0.10.2
     */
fun promise(): Promise<Any?>
}

/**
 * @public
 * @since 0.9.7
 */
external class TextAreaComponent : AbstractTextComponent<HTMLTextAreaElement> {
/**
     * @public
     */
constructor (containerEl: HTMLElement)
}

/**
 * @public
 * @since 0.9.21
 */
external class TextComponent : AbstractTextComponent<HTMLInputElement> {
constructor (containerEl: HTMLElement)
}

/**
 * This class implements a plaintext-based editable file view, which can be loaded and saved given an editor.
 *
 * Note that by default, this view only saves when it's closing. To implement auto-save, your editor should
 * call `this.requestSave()` when the content is changed.
 * @public
 * @since 0.10.12
 */
external class TextFileView : EditableFileView {
/**
     * @public
     */
constructor (leaf: WorkspaceLeaf)
/**
     * In memory data
     * @public
     * @since 0.10.12
     */
var data: String
/**
     * Debounced save in 2 seconds from now
     * @public
     * @since 0.10.12
     */
var requestSave: () -> Unit
/**
     * @public
     * @since 0.10.12
     */
fun onUnloadFile(file: TFile): Promise<js.core.Void>
/**
     * @public
     * @since 0.10.12
     */
fun onLoadFile(file: TFile): Promise<js.core.Void>
/**
     * @public
     * @since 0.10.12
     */
fun save(clear: Boolean = definedExternally): Promise<js.core.Void>
/**
     * Gets the data from the editor. This will be called to save the editor contents to the file.
     * @public
     * @since 0.10.12
     */
fun getViewData(): String
/**
     * Set the data to the editor. This is used to load the file contents.
     *
     * If clear is set, then it means we're opening a completely different file.
     * In that case, you should call clear(), or implement a slightly more efficient
     * clearing mechanism given the new data to be set.
     * @public
     * @since 0.10.12
     */
fun setViewData(data: String, clear: Boolean): Unit
/**
     * Clear the editor. This is usually called when we're about to open a completely
     * different file, so it's best to clear any editor states like undo-redo history,
     * and any caches/indexes associated with the previous file contents.
     * @public
     * @since 0.10.12
     */
fun clear(): Unit
}

/**
 * @public
 * @since 1.10.0
 */
external interface TextOption : BaseOption {
/**
     * @public
     * @since 1.10.0
     */
var type: String /* 'text' */
/**
     * @public
     * @since 1.10.0
     */
var default: String?
/**
     * @public
     * @since 1.10.0
     */
var placeholder: String?
}

/**
 * @public
 * @since 0.9.7
 */
external class TFile : TAbstractFile {
/**
     * @public
     * @since 0.9.7
     */
var stat: FileStats
/**
     * @public
     * @since 0.9.7
     */
var basename: String
/**
     * @public
     * @since 0.9.7
     */
var extension: String
}

/**
 * @public
 * @since 0.9.7
 */
external class TFolder : TAbstractFile {
/**
     * @public
     * @since 0.9.7
     */
var children: js.array.ReadonlyArray<TAbstractFile>
/**
     * @public
     * @since 0.9.7
     */
fun isRoot(): Boolean
}

/**
 * @public
 * @since 0.9.7
 */
external class ToggleComponent : ValueComponent<Boolean> {
/**
     * @public
     * @since 0.9.7
     */
constructor (containerEl: HTMLElement)
/**
     * @public
     * @since 0.9.7
     */
var toggleEl: HTMLElement
/**
     * @public
     * @since 1.2.3
     */
fun setDisabled(disabled: Boolean): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun getValue(): Boolean
/**
     * @public
     * @since 0.9.7
     */
fun setValue(on: Boolean): Unit /* this */
/**
     * @public
     * @since 1.1.1
     */
fun setTooltip(tooltip: String, options: TooltipOptions = definedExternally): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun onClick(): Unit
/**
     * @public
     * @since 0.9.7
     */
fun onChange(callback: (value: Boolean) -> Any?): Unit /* this */
}

/**
 * @public
 * @since 1.10.0
 */
external interface ToggleOption : BaseOption {
/**
     * @public
     * @since 1.10.0
     */
var type: String /* 'toggle' */
/**
     * @public
     * @since 1.10.0
     */
var default: Boolean?
}

/** @public */
external interface TooltipOptions {
/** @public */
var placement: TooltipPlacement?
/**
     * @public
     * @since 1.8.7
     */
var classes: js.array.ReadonlyArray<String>?
/**
     * @public
     * @since 1.8.7
     */
var gap: Double?
/**
     * @public
     * @since 1.4.11
     */
var delay: Double?
}

/** @public */
sealed external interface TooltipPlacement {
companion object {
@seskar.js.JsValue("bottom")
val bottom: TooltipPlacement
@seskar.js.JsValue("right")
val right: TooltipPlacement
@seskar.js.JsValue("left")
val left: TooltipPlacement
@seskar.js.JsValue("top")
val top: TooltipPlacement
}
}

/**
 * {@link Value} wrapping an external link.
 * @public
 * @since 1.10.0
 */
external class UrlValue : StringValue {
constructor (value: T)
}

/**
 * @public
 */
typealias UserEvent = Any? /* MouseEvent | KeyboardEvent | TouchEvent | PointerEvent */

/**
 * Container type for data which can expose functions for retrieving, comparing, and rendering the data.
 * Most commonly used in conjunction with formulas for Bases. Values can be used as formula parameters,
 * intermediate values, and the result of evaluation.
 * @public
 * @since 1.10.0
 */
external class Value {
/**
     * @public
     * @since 1.10.0
     */
fun toString(): String
/**
     * @public
     * @since 1.10.0
     */
fun isTruthy(): Boolean
/**
     * @public
     * @since 1.10.0
     */
fun equals(other: Unit /* this */): Boolean
/**
     * @public
     * @since 1.10.0
     */
fun looseEquals(other: Value): Boolean
/**
     * Render this value into the provided HTMLElement.
     * @public
     * @since 1.10.0
     */
fun renderTo(el: HTMLElement, ctx: RenderContext): Unit
companion object {
/**
     * @public
     * @since 1.10.0
     */
fun equals(a: Value?, b: Value?): Boolean
/**
     * @public
     * @since 1.10.0
     */
fun looseEquals(a: Value?, b: Value?): Boolean
}
}

/**
 * @public
 * @since 0.9.7
 */
external class ValueComponent<T> : BaseComponent {
/**
     * @public
     * @since 0.9.7
     */
fun registerOptionListener(listeners: Record<String, (value: T? /* use undefined for default */) -> T>, key: String): Unit /* this */
/**
     * @public
     * @since 0.9.7
     */
fun getValue(): T
/**
     * @public
     * @since 0.9.7
     */
fun setValue(value: T): Unit /* this */
}

/**
 * Work with files and folders stored inside a vault.
 * @see {@link https://docs.obsidian.md/Plugins/Vault}
 * @public
 * @since 0.9.7
 */
external class Vault : Events {
/**
     * @public
     * @since 0.9.7
     */
var adapter: DataAdapter
/**
     * Gets the path to the config folder.
     * This value is typically `.obsidian` but it could be different.
     * @public
     * @since 0.11.1
     */
var configDir: String
/**
     * Gets the name of the vault.
     * @public
     * @since 0.9.7
     */
fun getName(): String
/**
     * Get a file inside the vault at the given path.
     * Returns `null` if the file does not exist.
     *
     * @param path
     * @public
     * @since 1.5.7
     */
fun getFileByPath(path: String): TFile?
/**
     * Get a folder inside the vault at the given path.
     * Returns `null` if the folder does not exist.
     *
     * @param path
     * @public
     * @since 1.5.7
     */
fun getFolderByPath(path: String): TFolder?
/**
     * Get a file or folder inside the vault at the given path. To check if the return type is
     * a file, use `instanceof TFile`. To check if it is a folder, use `instanceof TFolder`.
     * @param path - vault absolute path to the folder or file, with extension, case sensitive.
     * @returns the abstract file, if it's found.
     * @public
     * @since 0.11.11
     */
fun getAbstractFileByPath(path: String): TAbstractFile?
/**
     * Get the root folder of the current vault.
     * @public
     * @since 0.9.7
     */
fun getRoot(): TFolder
/**
     * Create a new plaintext file inside the vault.
     * @param path - Vault absolute path for the new file, with extension.
     * @param data - text content for the new file.
     * @param options - (Optional)
     * @public
     * @since 0.9.7
     */
fun create(path: String, data: String, options: DataWriteOptions = definedExternally): Promise<TFile>
/**
     * Create a new binary file inside the vault.
     * @param path - Vault absolute path for the new file, with extension.
     * @param data - content for the new file.
     * @param options - (Optional)
     * @throws Error if file already exists
     * @public
     * @since 0.9.7
     */
fun createBinary(path: String, data: ArrayBuffer, options: DataWriteOptions = definedExternally): Promise<TFile>
/**
     * Create a new folder inside the vault.
     * @param path - Vault absolute path for the new folder.
     * @throws Error if folder already exists
     * @public
     * @since 1.4.0
     */
fun createFolder(path: String): Promise<TFolder>
/**
     * Read a plaintext file that is stored inside the vault, directly from disk.
     * Use this if you intend to modify the file content afterwards.
     * Use {@link Vault.cachedRead} otherwise for better performance.
     * @public
     * @since 0.9.7
     */
fun read(file: TFile): Promise<String>
/**
     * Read the content of a plaintext file stored inside the vault
     * Use this if you only want to display the content to the user.
     * If you want to modify the file content afterward use {@link Vault.read}
     * @public
     * @since 0.9.7
     */
fun cachedRead(file: TFile): Promise<String>
/**
     * Read the content of a binary file stored inside the vault.
     * @public
     * @since 0.9.7
     */
fun readBinary(file: TFile): Promise<ArrayBuffer>
/**
     * Returns an URI for the browser engine to use, for example to embed an image.
     * @public
     * @since 0.9.7
     */
fun getResourcePath(file: TFile): String
/**
     * Deletes the file completely.
     * @param file - The file or folder to be deleted
     * @param force - Should attempt to delete folder even if it has hidden children
     * @public
     * @since 0.9.7
     */
fun delete(file: TAbstractFile, force: Boolean = definedExternally): Promise<js.core.Void>
/**
     * Tries to move to system trash. If that isn't successful/allowed, use local trash
     * @param file - The file or folder to be deleted
     * @param system - Set to `false` to use local trash by default.
     * @public
     * @since 0.9.7
     */
fun trash(file: TAbstractFile, system: Boolean): Promise<js.core.Void>
/**
     * Rename or move a file. To ensure links are automatically renamed,
     * use {@link FileManager.renameFile} instead.
     * @param file - the file to rename/move
     * @param newPath - vault absolute path to move file to.
     * @public
     * @since 0.9.11
     */
fun rename(file: TAbstractFile, newPath: String): Promise<js.core.Void>
/**
     * Modify the contents of a plaintext file.
     * @param file - The file
     * @param data - The new file content
     * @param options - (Optional)
     * @public
     * @since 0.9.7
     */
fun modify(file: TFile, data: String, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * Modify the contents of a binary file.
     * @param file - The file
     * @param data - The new file content
     * @param options - (Optional)
     * @public
     * @since 0.9.7
     */
fun modifyBinary(file: TFile, data: ArrayBuffer, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * Add text to the end of a plaintext file inside the vault.
     * @param file - The file
     * @param data - the text to add
     * @param options - (Optional)
     * @public
     * @since 0.13.0
     */
fun append(file: TFile, data: String, options: DataWriteOptions = definedExternally): Promise<js.core.Void>
/**
     * Atomically read, modify, and save the contents of a note.
     * @param file - the file to be read and modified.
     * @param fn - a callback function which returns the new content of the note synchronously.
     * @param options - write options.
     * @returns string - the text value of the note that was written.
     * @example
     * ```ts
     * app.vault.process(file, (data) => {
     *  return data.replace('Hello', 'World');
     * });
     * ```
     * @public
     * @since 1.1.0
     */
fun process(file: TFile, fn: (data: String) -> String, options: DataWriteOptions = definedExternally): Promise<String>
/**
     * Create a copy of a file or folder.
     * @param file - The file or folder.
     * @param newPath - Vault absolute path for the new copy.
     * @public
     * @since 1.8.7
     */
fun <T : TAbstractFile> copy(file: T, newPath: String): Promise<T>
/**
     * Get all files and folders in the vault.
     * @public
     * @since 0.9.7
     */
fun getAllLoadedFiles(): js.array.ReadonlyArray<TAbstractFile>
/**
     * Get all folders in the vault.
     * @param includeRoot - Should the root folder (`/`) be returned
     * @public
     * @since 1.6.6
     */
fun getAllFolders(includeRoot: Boolean = definedExternally): js.array.ReadonlyArray<TFolder>
/**
     * Get all Markdown files in the vault.
     * @public
     * @since 0.9.7
     */
fun getMarkdownFiles(): js.array.ReadonlyArray<TFile>
/**
     * Get all files in the vault.
     * @public
     * @since 0.9.7
     */
fun getFiles(): js.array.ReadonlyArray<TFile>
/**
     * Called when a file is created.
     * This is also called when the vault is first loaded for each existing file
     * If you do not wish to receive create events on vault load, register your event handler inside {@link Workspace.onLayoutReady}.
     * @public
     * @since 0.9.7
     */
fun on(name: String /* 'create' */, callback: (file: TAbstractFile) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Called when a file is modified.
     * @public
     * @since 0.9.7
     */
fun on(name: String /* 'modify' */, callback: (file: TAbstractFile) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Called when a file is deleted.
     * @public
     * @since 0.9.7
     */
fun on(name: String /* 'delete' */, callback: (file: TAbstractFile) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Called when a file is renamed.
     * @public
     * @since 0.9.7
     */
fun on(name: String /* 'rename' */, callback: (file: TAbstractFile, oldPath: String) -> Any?, ctx: Any? = definedExternally): EventRef
companion object {
/**
     * @public
     * @since 0.9.7
     */
fun recurseChildren(root: TFolder, cb: (file: TAbstractFile) -> Any?): Unit
}
}

/**
 * @public
 * @since 0.9.7
 */
external class View : Component {
/**
     * @public
     * @since 0.9.7
     */
constructor (leaf: WorkspaceLeaf)
/**
     * @public
     * @since 0.9.7
     */
var app: App
/**
     * @public
     * @since 1.1.0
     */
var icon: IconName
/**
     * Whether or not the view is intended for navigation.
     * If your view is a static view that is not intended to be navigated away, set this to false.
     * (For example: File explorer, calendar, etc.)
     * If your view opens a file or can be otherwise navigated, set this to true.
     * (For example: Markdown editor view, Kanban view, PDF view, etc.)
     *
     * @public
     * @since 0.15.1
     */
var navigation: Boolean
/**
     * @public
     * @since 0.9.7
     */
var leaf: WorkspaceLeaf
/**
     * @public
     * @since 0.9.7
     */
var containerEl: HTMLElement
/**
     * Assign an optional scope to your view to register hotkeys for when the view
     * is in focus.
     *
     * @example
     * ```ts
     * this.scope = new Scope(this.app.scope);
     * ```
     * @default null
     * @public
     * @since 1.5.7
     */
var scope: Scope?
/**
     * @public
     * @since 0.9.7
     */
fun onOpen(): Promise<js.core.Void>
/**
     * @public
     * @since 0.9.7
     */
fun onClose(): Promise<js.core.Void>
/**
     * @public
     * @since 0.9.7
     */
fun getViewType(): String
/**
     * @public
     * @since 0.9.7
     */
fun getState(): Record<String, Any?>
/**
     * @public
     * @since 0.9.7
     */
fun setState(state: Any?, result: ViewStateResult): Promise<js.core.Void>
/**
     * @public
     * @since 0.9.7
     */
fun getEphemeralState(): Record<String, Any?>
/**
     * @public
     * @since 0.9.7
     */
fun setEphemeralState(state: Any?): Unit
/**
     * @public
     * @since 1.1.0
     */
fun getIcon(): IconName
/**
     * Called when the size of this view is changed.
     * @public
     * @since 0.9.7
     */
fun onResize(): Unit
/**
     * @public
     * @since 0.9.7
     */
fun getDisplayText(): String
/**
     * Populates the pane menu.
     *
     * (Replaces the previously removed `onHeaderMenu` and `onMoreOptionsMenu`)
     * @public
     * @since 0.15.3
     */
fun onPaneMenu(menu: Menu, source: String /* 'more-options' */): Unit

/**
     * Populates the pane menu.
     *
     * (Replaces the previously removed `onHeaderMenu` and `onMoreOptionsMenu`)
     * @public
     * @since 0.15.3
     */
fun onPaneMenu(menu: Menu, source: String /* 'tab-header' */): Unit

/**
     * Populates the pane menu.
     *
     * (Replaces the previously removed `onHeaderMenu` and `onMoreOptionsMenu`)
     * @public
     * @since 0.15.3
     */
fun onPaneMenu(menu: Menu, source: String): Unit
}

/**
 * @public
 */
typealias ViewCreator = (leaf: WorkspaceLeaf) -> View

/**
 * ViewOption and the associated sub-types are configuration-driven settings controls
 * which can be provided by a {@link BasesViewRegistration} to expose configuration options
 * to users in the view config menu of the Bases toolbar.
 *
 * @public
 * @since 1.10.0
 */
typealias ViewOption = Any /* TextOption | MultitextOption | GroupOption | PropertyOption | ToggleOption | SliderOption | DropdownOption */

/**
 * @public
 */
external interface ViewState {
/**
     * @public
     */
var type: String
/**
     * @public
     */
var state: Record<String, Any?>?
/**
     * @public
     */
var active: Boolean?
/**
     * @public
     */
var pinned: Boolean?
/**
     * @public
     */
var group: WorkspaceLeaf?
}

/**
 * @public
 */
external interface ViewStateResult {
/**
     * Set this to true to indicate that there is a state change which should be recorded in the navigation history.
     * @public
     */
var history: Boolean
}

/**
 * @public
 * @since 0.9.7
 */
external class Workspace : Events {
/**
     * @public
     * @since 0.9.7
     */
var leftSplit: Any /* WorkspaceSidedock | WorkspaceMobileDrawer */
/**
     * @public
     * @since 0.9.7
     */
var rightSplit: Any /* WorkspaceSidedock | WorkspaceMobileDrawer */
/**
     * @public
     * @since 0.9.7
     */
var leftRibbon: WorkspaceRibbon
/**
     * @public
     * @deprecated No longer used
     */
var rightRibbon: WorkspaceRibbon
/**
     * @public
     * @since 0.9.7
     */
var rootSplit: WorkspaceRoot
/**
     * Indicates the currently focused leaf, if one exists.
     *
     * Please avoid using `activeLeaf` directly, especially without checking whether
     * `activeLeaf` is null.
     *
     * @public
     * @since 0.9.7
     * @deprecated The use of this field is discouraged.
     * The recommended alternatives are:
     * - If you need information about the current view, use {@link Workspace.getActiveViewOfType}.
     * - If you need to open a new file or navigate a view, use {@link Workspace.getLeaf}.
     */
var activeLeaf: WorkspaceLeaf?
/**
     *
     * @public
     * @since 0.9.7
     */
var containerEl: HTMLElement
/**
     * If the layout of the app has been successfully initialized.
     * To react to the layout becoming ready, use {@link Workspace.onLayoutReady}
     * @public
     * @since 0.9.7
     */
var layoutReady: Boolean
/**
     * Save the state of the current workspace layout.
     * @public
     * @since 0.16.0
     */
var requestSaveLayout: Debouncer<js.array.Tuple, Promise<js.core.Void>>
/**
     * A component managing the current editor.
     * This can be null if the active view has no editor.
     * @public
     */
var activeEditor: MarkdownFileInfo?
/**
     * Runs the callback function right away if layout is already ready,
     * or push it to a queue to be called later when layout is ready.
     * @public
     * @since 0.11.0
     * */
fun onLayoutReady(callback: () -> Any?): Unit
/**
     * @public
     * @since 0.9.7
     */
fun changeLayout(workspace: Any?): Promise<js.core.Void>
/**
     * @public
     * @since 0.9.7
     */
fun getLayout(): Record<String, Any?>
/**
     * @public
     * @since 0.9.11
     */
fun createLeafInParent(parent: WorkspaceSplit, index: Double): WorkspaceLeaf
/**
     * @public
     * @since 0.9.7
     */
fun createLeafBySplit(leaf: WorkspaceLeaf, direction: SplitDirection = definedExternally, before: Boolean = definedExternally): WorkspaceLeaf
/**
     * @public
     * @deprecated - You should use {@link Workspace.getLeaf|getLeaf(true)} instead which does the same thing.
     * @since 0.9.7
     */
fun splitActiveLeaf(direction: SplitDirection = definedExternally): WorkspaceLeaf
/**
     * @public
     * @deprecated - Use the new form of this method instead
     * @since 0.13.8
     */
fun duplicateLeaf(leaf: WorkspaceLeaf, direction: SplitDirection = definedExternally): Promise<WorkspaceLeaf>
/**
     * @public
     * @since 1.1.0
     */
fun duplicateLeaf(leaf: WorkspaceLeaf, leafType: PaneType, direction: SplitDirection = definedExternally): Promise<WorkspaceLeaf>

/**
     * @public
     * @since 1.1.0
     */
fun duplicateLeaf(leaf: WorkspaceLeaf, leafType: Boolean, direction: SplitDirection = definedExternally): Promise<WorkspaceLeaf>
/**
     * @public
     * @deprecated - You should use {@link Workspace.getLeaf|getLeaf(false)} instead which does the same thing.
     */
fun getUnpinnedLeaf(): WorkspaceLeaf
/**
     * Creates a new leaf in a leaf adjacent to the currently active leaf.
     * If direction is `'vertical'`, the leaf will appear to the right.
     * If direction is `'horizontal'`, the leaf will appear below the current leaf.
     *
     * @public
     * @since 0.16.0
     */
fun getLeaf(newLeaf: String /* 'split' */ = definedExternally, direction: SplitDirection = definedExternally): WorkspaceLeaf
/**
     * If newLeaf is false (or not set) then an existing leaf which can be navigated
     * is returned, or a new leaf will be created if there was no leaf available.
     *
     * If newLeaf is `'tab'` or `true` then a new leaf will be created in the preferred
     * location within the root split and returned.
     *
     * If newLeaf is `'split'` then a new leaf will be created adjacent to the currently active leaf.
     *
     * If newLeaf is `'window'` then a popout window will be created with a new leaf inside.
     *
     * @public
     * @since 0.16.0
     */
fun getLeaf(): WorkspaceLeaf

/**
     * If newLeaf is false (or not set) then an existing leaf which can be navigated
     * is returned, or a new leaf will be created if there was no leaf available.
     *
     * If newLeaf is `'tab'` or `true` then a new leaf will be created in the preferred
     * location within the root split and returned.
     *
     * If newLeaf is `'split'` then a new leaf will be created adjacent to the currently active leaf.
     *
     * If newLeaf is `'window'` then a popout window will be created with a new leaf inside.
     *
     * @public
     * @since 0.16.0
     */
fun getLeaf(newLeaf: PaneType = definedExternally): WorkspaceLeaf

/**
     * If newLeaf is false (or not set) then an existing leaf which can be navigated
     * is returned, or a new leaf will be created if there was no leaf available.
     *
     * If newLeaf is `'tab'` or `true` then a new leaf will be created in the preferred
     * location within the root split and returned.
     *
     * If newLeaf is `'split'` then a new leaf will be created adjacent to the currently active leaf.
     *
     * If newLeaf is `'window'` then a popout window will be created with a new leaf inside.
     *
     * @public
     * @since 0.16.0
     */
fun getLeaf(newLeaf: Boolean = definedExternally): WorkspaceLeaf
/**
     * Migrates this leaf to a new popout window.
     * Only works on the desktop app.
     * @public
     * @throws Error if the app does not support popout windows (i.e. on mobile or if Electron version is too old)
     * @since 0.15.4
     */
fun moveLeafToPopout(leaf: WorkspaceLeaf, data: WorkspaceWindowInitData = definedExternally): WorkspaceWindow
/**
     * Open a new popout window with a single new leaf and return that leaf.
     * Only works on the desktop app.
     * @public
     * @since 0.15.4
     */
fun openPopoutLeaf(data: WorkspaceWindowInitData = definedExternally): WorkspaceLeaf
/**
     * @public
     * @since 0.16.0
     */
fun openLinkText(linktext: String, sourcePath: String): Promise<js.core.Void>

/**
     * @public
     * @since 0.16.0
     */
fun openLinkText(linktext: String, sourcePath: String, newLeaf: PaneType = definedExternally, openViewState: OpenViewState = definedExternally): Promise<js.core.Void>

/**
     * @public
     * @since 0.16.0
     */
fun openLinkText(linktext: String, sourcePath: String, newLeaf: Boolean = definedExternally, openViewState: OpenViewState = definedExternally): Promise<js.core.Void>
/**
     * Sets the active leaf
     * @param leaf - The new active leaf
     * @param params - Parameter object of whether to set the focus.
     * @public
     * @since 0.16.3
     */
fun setActiveLeaf(leaf: WorkspaceLeaf, params: WorkspaceSetActiveLeafParams = definedExternally): Unit
/**
     * @deprecated - function signature changed. Use other form instead
     * @public
     */
fun setActiveLeaf(leaf: WorkspaceLeaf, pushHistory: Boolean, focus: Boolean): Unit
/**
     * Retrieve a leaf by its id.
     * @param id id of the leaf to retrieve.
     * @public
     * @since 1.5.1
     */
fun getLeafById(id: String): WorkspaceLeaf?
/**
     * Get all leaves that belong to a group
     * @param group id
     * @public
     * @since 0.9.7
     */
fun getGroupLeaves(group: String): js.array.ReadonlyArray<WorkspaceLeaf>
/**
     * Get the most recently active leaf in a given workspace root. Useful for interacting with the leaf in the root split while a sidebar leaf might be active.
     * @param root Root for the leaves you want to search. If a root is not provided, the `rootSplit` and leaves within pop-outs will be searched.
     * @public
     * @since 0.15.4
     */
fun getMostRecentLeaf(root: WorkspaceParent = definedExternally): WorkspaceLeaf?
/**
     * Create a new leaf inside the left sidebar.
     * @param split Should the existing split be split up?
     * @public
     * @since 0.9.7
     */
fun getLeftLeaf(split: Boolean): WorkspaceLeaf?
/**
     * Create a new leaf inside the right sidebar.
     * @param split Should the existing split be split up?
     * @public
     * @since 0.9.7
     */
fun getRightLeaf(split: Boolean): WorkspaceLeaf?
/**
     * Get side leaf or create one if one does not exist.
     * @public
     * @since 1.7.2
     */
fun ensureSideLeaf(type: String, side: Side, options: WorkspaceEnsureSideLeafOptions = definedExternally): Promise<WorkspaceLeaf>
/**
     * Get the currently active view of a given type.
     * @public
     * @since 0.9.16
     */
fun <T : View> getActiveViewOfType(type: Constructor<T>): T?
/**
     * Returns the file for the current view if it's a `FileView`.
     * Otherwise, it will return the most recently active file.
     * @public
     */
fun getActiveFile(): TFile?
/**
     * Iterate through all leaves in the main area of the workspace.
     * @public
     * @since 0.9.7
     */
fun iterateRootLeaves(callback: (leaf: WorkspaceLeaf) -> Any?): Unit
/**
     * Iterate through all leaves, including main area leaves, floating leaves, and sidebar leaves.
     * @public
     * @since 0.9.7
     */
fun iterateAllLeaves(callback: (leaf: WorkspaceLeaf) -> Any?): Unit
/**
     * Get all leaves of a given type.
     * @public
     * @since 0.9.7
     */
fun getLeavesOfType(viewType: String): js.array.ReadonlyArray<WorkspaceLeaf>
/**
     * Remove all leaves of the given type.
     * @public
     * @since 0.9.7
     */
fun detachLeavesOfType(viewType: String): Unit
/**
     * Bring a given leaf to the foreground. If the leaf is in a sidebar, the sidebar will be uncollapsed.
     * `await` this function to ensure your view has been fully loaded and is not deferred.
     * @public
     * @since 1.7.2
     */
fun revealLeaf(leaf: WorkspaceLeaf): Promise<js.core.Void>
/**
     * Get the filenames of the 10 most recently opened files.
     * @public
     * @since 0.9.7
     */
fun getLastOpenFiles(): js.array.ReadonlyArray<String>
/**
     * Calling this function will update/reconfigure the options of all Markdown views.
     * It is fairly expensive, so it should not be called frequently.
     * @public
     * @since 0.13.21
     */
fun updateOptions(): Unit
/**
     * Add a context menu to internal file links.
     * @public
     * @since 0.12.10
     */
fun handleLinkContextMenu(menu: Menu, linktext: String, sourcePath: String, leaf: WorkspaceLeaf = definedExternally): Boolean
/**
     * Triggered when the active Markdown file is modified. React to file changes before they
     * are saved to disk.
     * @public
     * @since 0.9.7
     */
fun on(name: String /* 'quick-preview' */, callback: (file: TFile, data: String) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when a `WorkspaceItem` is resized or the workspace layout has changed.
     * @public
     * @since 0.9.7
     */
fun on(name: String /* 'resize' */, callback: () -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when the active leaf changes.
     * @public
     * @since 0.10.9
     */
fun on(name: String /* 'active-leaf-change' */, callback: (leaf: WorkspaceLeaf?) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when the active file changes. The file could be in a new leaf, an existing leaf,
     * or an embed.
     * @public
     * @since 0.10.9
     */
fun on(name: String /* 'file-open' */, callback: (file: TFile?) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * @public
     * @since 0.9.20
     */
fun on(name: String /* 'layout-change' */, callback: () -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when a new popout window is created.
     * @public
     * @since 0.15.3
     */
fun on(name: String /* 'window-open' */, callback: (win: WorkspaceWindow, window: Window) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when a popout window is closed.
     * @public
     * @since 0.15.3
     */
fun on(name: String /* 'window-close' */, callback: (win: WorkspaceWindow, window: Window) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when the CSS of the app has changed.
     * @public
     * @since 0.9.7
     */
fun on(name: String /* 'css-change' */, callback: () -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when the user opens the context menu on a file.
     * @public
     * @since 0.9.12
     */
fun on(name: String /* 'file-menu' */, callback: (menu: Menu, file: TAbstractFile, source: String, leaf: WorkspaceLeaf? /* use undefined for default */) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when the user opens the context menu with multiple files selected in the File Explorer.
     * @public
     * @since 1.4.10
     */
fun on(name: String /* 'files-menu' */, callback: (menu: Menu, files: js.array.ReadonlyArray<TAbstractFile>, source: String, leaf: WorkspaceLeaf? /* use undefined for default */) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when the user opens the context menu on an external URL.
     * @public
     * @since 1.5.1
     */
fun on(name: String /* 'url-menu' */, callback: (menu: Menu, url: String) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when the user opens the context menu on an editor.
     * @public
     * @since 1.1.0
     */
fun on(name: String /* 'editor-menu' */, callback: (menu: Menu, editor: Editor, info: Any /* MarkdownView | MarkdownFileInfo */) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when changes to an editor has been applied, either programmatically or from a user event.
     * @public
     * @since 1.1.1
     */
fun on(name: String /* 'editor-change' */, callback: (editor: Editor, info: Any /* MarkdownView | MarkdownFileInfo */) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when the editor receives a paste event.
     * Check for `evt.defaultPrevented` before attempting to handle this event, and return if it has been already handled.
     * Use `evt.preventDefault()` to indicate that you've handled the event.
     * @public
     * @since 1.1.0
     */
fun on(name: String /* 'editor-paste' */, callback: (evt: ClipboardEvent, editor: Editor, info: Any /* MarkdownView | MarkdownFileInfo */) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when the editor receives a drop event.
     * Check for `evt.defaultPrevented` before attempting to handle this event, and return if it has been already handled.
     * Use `evt.preventDefault()` to indicate that you've handled the event.
     * @public
     * @since 1.1.0
     */
fun on(name: String /* 'editor-drop' */, callback: (evt: DragEvent, editor: Editor, info: Any /* MarkdownView | MarkdownFileInfo */) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * Triggered when the app is about to quit.
     * Not guaranteed to actually run.
     * Perform some best effort cleanup here.
     * @public
     * @since 0.10.2
     */
fun on(name: String /* 'quit' */, callback: (tasks: Tasks) -> Any?, ctx: Any? = definedExternally): EventRef
}

/**
 * @public
 * @since 0.15.4
 */
external class WorkspaceContainer : WorkspaceSplit {
/**
     * @public
     * @since 0.15.4
     */
var win: Window
/**
     * @public
     * @since 0.15.4
     */
var doc: Document
}

/**
 * @public
 * @since 0.15.2
 */
external class WorkspaceFloating : WorkspaceParent {
/**
     * @public
     * @since 0.15.2
     */
var parent: WorkspaceParent
}

/**
 * @public
 * @since 0.10.2
 */
external class WorkspaceItem : Events {
/**
     * The direct parent of the leaf.
     * @public
     * @since 1.6.6
     */
var parent: WorkspaceParent
/**
     * @public
     * @since 0.10.2
     */
fun getRoot(): WorkspaceItem
/**
     * Get the root container parent item, which can be one of:
     * - {@link WorkspaceRoot}
     * - {@link WorkspaceWindow}
     * @public
     * @since 0.15.4
     */
fun getContainer(): WorkspaceContainer
}

/**
 * @public
 */
external class WorkspaceLeaf : WorkspaceItem, HoverParent {
/**
     * The direct parent of the leaf.
     *
     * On desktop, a leaf is always a child of a `WorkspaceTabs` component.
     * On mobile, a leaf might be a child of a `WorkspaceMobileDrawer`.
     * Perform an `instanceof` check before making an assumption about the
     * `parent`.
     *
     * @public
     */
var parent: Any /* WorkspaceTabs | WorkspaceMobileDrawer */
/**
     * The view associated with this leaf. Do not attempt to cast this to your
     * custom `View` without first checking `instanceof`.
     * @public
     */
var view: View
/** @public */
var hoverPopover: HoverPopover?
/**
     * Open a file in this leaf.
     *
     * @public
     */
fun openFile(file: TFile, openState: OpenViewState = definedExternally): Promise<js.core.Void>
/**
     * @public
     */
fun open(view: View): Promise<View>
/**
     * @public
     */
fun getViewState(): ViewState
/**
     * @public
     */
fun setViewState(viewState: ViewState, eState: Any? = definedExternally): Promise<js.core.Void>
/**
     * Returns true if this leaf is currently deferred because it is in the background.
     * A deferred leaf will have a DeferredView as its view, instead of the View that
     * it should normally have for its type (like MarkdownView for the `markdown` type).
     * @since 1.7.2
     * @public
     */
val isDeferred: Boolean
/**
     * If this view is currently deferred, load it and await that it has fully loaded.
     * @since 1.7.2
     * @public
     */
fun loadIfDeferred(): Promise<js.core.Void>
/**
     * @public
     */
fun getEphemeralState(): Any?
/**
     * @public
     */
fun setEphemeralState(state: Any?): Unit
/**
     * @public
     */
fun togglePinned(): Unit
/**
     * @public
     */
fun setPinned(pinned: Boolean): Unit
/**
     * @public
     */
fun setGroupMember(other: WorkspaceLeaf): Unit
/**
     * @public
     */
fun setGroup(group: String): Unit
/**
     * @public
     */
fun detach(): Unit
/**
     * @public
     */
fun getIcon(): IconName
/**
     * @public
     */
fun getDisplayText(): String
/**
     * @public
     */
fun onResize(): Unit
/**
     * @public
     */
fun on(name: String /* 'pinned-change' */, callback: (pinned: Boolean) -> Any?, ctx: Any? = definedExternally): EventRef
/**
     * @public
     */
fun on(name: String /* 'group-change' */, callback: (group: String) -> Any?, ctx: Any? = definedExternally): EventRef
}

/**
 * @public
 * @since 1.6.6
 */
external class WorkspaceMobileDrawer : WorkspaceParent {
/** @public */
var parent: WorkspaceParent
/** @public */
var collapsed: Boolean
/** @public */
fun expand(): Unit
/** @public */
fun collapse(): Unit
/** @public */
fun toggle(): Unit
}

/**
 * @public
 * @since 0.9.7
 */
external class WorkspaceParent : WorkspaceItem {

}

/**
 * @public
 */
external class WorkspaceRibbon {

}

/**
 * @public
 * @since 0.15.2
 */
external class WorkspaceRoot : WorkspaceContainer {
/** @public */
var win: Window
/** @public */
var doc: Document
}

/**
 * @public
 * @since 0.15.4
 */
external class WorkspaceSidedock : WorkspaceSplit {
/**
     * @public
     * @since 0.12.11
     */
var collapsed: Boolean
/**
     * @public
     * @since 0.12.11
     */
fun toggle(): Unit
/**
     * @public
     * @since 0.12.11
     */
fun collapse(): Unit
/**
     * @public
     * @since 0.12.11
     */
fun expand(): Unit
}

/**
 * @public
 * @since 0.9.7
 */
external class WorkspaceSplit : WorkspaceParent {
/** @public */
var parent: WorkspaceParent
}

/**
 * @public
 */
external class WorkspaceTabs : WorkspaceParent {
/** @public */
var parent: WorkspaceSplit
}

/**
 * @public
 * @since 0.15.4
 */
external class WorkspaceWindow : WorkspaceContainer {
/** @public */
var win: Window
/** @public */
var doc: Document
}

/**
 * @public
 */
external interface WorkspaceWindowInitData {
/** @public */
var x: Double?
/** @public */
var y: Double?
/**
     * The suggested size
     * @public
     */
var size: (WorkspaceWindowInitDataSize)?
}

/* export {}; */

/** @public */
typealias IconName = String
external interface ObjectConstructorEachObject<T> {
operator fun get(key: String): T?

operator fun set(key: String, value: T?)
}

external interface NodeInstanceOfType<T> {
/* new (): T; */
}

external interface ElementSetAttrsObj {
operator fun get(key: String): Any? /* string | number | boolean | null */

operator fun set(key: String, value: Any? /* string | number | boolean | null */)
}

external interface DomElementInfoAttr {
operator fun get(key: String): Any? /* string | number | boolean | null */

operator fun set(key: String, value: Any? /* string | number | boolean | null */)
}

external interface SvgElementInfoAttr {
operator fun get(key: String): Any? /* string | number | boolean | null */

operator fun set(key: String, value: Any? /* string | number | boolean | null */)
}

external interface UIEventInstanceOfType<T> {
/* new (...data: any[]): T; */
}

external interface EditorGetScrollInfoResult {
/**
         * @public
         * @since 0.11.11
         */
var top: Double
/**
         * @public
         * @since 0.11.11
         */
var left: Double
}

external interface ParseLinktextResult {
/**
     * @public
     */
var path: String
/**
     * @public
     */
var subpath: String
}

external interface Platform {
/**
     * The UI is in desktop mode.
     * @public
     */
var isDesktop: Boolean
/**
     * The UI is in mobile mode.
     * @public
     */
var isMobile: Boolean
/**
     * We're running the electron-based desktop app.
     * @public
     */
var isDesktopApp: Boolean
/**
     * We're running the capacitor-js mobile app.
     * @public
     */
var isMobileApp: Boolean
/**
     * We're running the iOS app.
     * @public
     */
var isIosApp: Boolean
/**
     * We're running the Android app.
     * @public
     */
var isAndroidApp: Boolean
/**
     * We're in a mobile app that has very limited screen space.
     * @public
     */
var isPhone: Boolean
/**
     * We're in a mobile app that has sufficiently large screen space.
     * @public
     */
var isTablet: Boolean
/**
     * We're on a macOS device, or a device that pretends to be one (like iPhones and iPads).
     * Typically used to detect whether to use command-based hotkeys vs ctrl-based hotkeys.
     * @public
     */
var isMacOS: Boolean
/**
     * We're on a Windows device.
     * @public
     */
var isWin: Boolean
/**
     * We're on a Linux device.
     * @public
     */
var isLinux: Boolean
/**
     * We're running in Safari.
     * Typically used to provide workarounds for Safari bugs.
     * @public
     */
var isSafari: Boolean
/**
     * The path prefix for resolving local files on this platform.
     * This returns:
     * - `file:///` on mobile
     * - `app://random-id/` on desktop (Replaces the old format of `app://local/`)
     * @public
     */
var resourcePathPrefix: String
}

external interface WorkspaceSetActiveLeafParams {
/** @public */
var focus: Boolean?
}

external interface WorkspaceEnsureSideLeafOptions {
/** @public */
var active: Boolean?
/** @public */
var split: Boolean?
/** @public */
var reveal: Boolean?
/** @public */
var state: Any?
}

external interface WorkspaceWindowInitDataSize {
/** @public */
var width: Double
/** @public */
var height: Double
}

external interface HTMLElement_EVENTS {
operator fun <K : /* keyof HTMLElementEventMap */> get(key: K): js.array.ReadonlyArray<EventListenerInfo>?

operator fun <K : /* keyof HTMLElementEventMap */> set(key: K, value: js.array.ReadonlyArray<EventListenerInfo>?)
}

external interface Document_EVENTS {
operator fun <K : /* keyof DocumentEventMap */> get(key: K): js.array.ReadonlyArray<EventListenerInfo>?

operator fun <K : /* keyof DocumentEventMap */> set(key: K, value: js.array.ReadonlyArray<EventListenerInfo>?)
}

sealed external interface AjaxOptionsMethod {
companion object {
@seskar.js.JsValue("GET")
val GET: AjaxOptionsMethod
@seskar.js.JsValue("POST")
val POST: AjaxOptionsMethod
}
}

sealed external interface TouchTouchType {
companion object {
@seskar.js.JsValue("stylus")
val stylus: TouchTouchType
@seskar.js.JsValue("direct")
val direct: TouchTouchType
}
}

sealed external interface BasesSortConfigDirection {
companion object {
@seskar.js.JsValue("ASC")
val ASC: BasesSortConfigDirection
@seskar.js.JsValue("DESC")
val DESC: BasesSortConfigDirection
}
}

sealed external interface EditorGetCursorSide {
companion object {
@seskar.js.JsValue("from")
val from: EditorGetCursorSide
@seskar.js.JsValue("to")
val to: EditorGetCursorSide
@seskar.js.JsValue("head")
val head: EditorGetCursorSide
@seskar.js.JsValue("anchor")
val anchor: EditorGetCursorSide
}
}

sealed external interface StatType {
companion object {
@seskar.js.JsValue("file")
val file: StatType
@seskar.js.JsValue("folder")
val folder: StatType
}
}
